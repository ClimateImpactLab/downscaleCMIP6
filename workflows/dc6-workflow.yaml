apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: dc6-dev-
  labels:
    component: dc6
spec:
  arguments:
    parameters:
      - name: reference-zarr
        value: "az://clean-era5/F320/tasmax.1995-2015.F320.zarr"
      - name: gcm-historical-zarr
        value: "az://clean-cmip6/ACCESS-ESM1-5/training/r1i1p1f1/tasmax.zarr"
      - name: gcm-training-zarr
        value: "az://clean-cmip6/ACCESS-ESM1-5/training/r1i1p1f1/tasmax.zarr"
      - name: gcm-future-zarr
        value: "az://clean-cmip6/ACCESS-ESM1-5/ssp370/r1i1p1f1/tasmax.zarr"
      - name: out-zarr
        value: "az://scratch/{{ workflow.name }}/out.zarr"
      - name: target-variable
        value: tasmax
      - name: biascorrect-firstfutureyear
        value: 2015
      - name: biascorrect-lastfutureyear
        value: 2100
      - name: biascorrect-kind
        value: additive  # multiplicative
      - name: domainfile1x1
        value: "az://support/domain.1x1.zarr"
      - name: domainfile0p25x0p25
        value: "az://support/domain.0p25x0p25.zarr"
      - name: climatology-zarr
        value: "az://clean-era5/tasmax_1995_2015_climo_cleaned.zarr"
      - name: correct-wetday-frequency
        value: false  # true or false
  entrypoint: main
  templates:

    - name: main
      dag:
        tasks:
          - name: reference-add-cyclic
            template: add-cyclic
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ workflow.parameters.reference-zarr }}"
          - name: reference-cyclic-rechunk
            dependencies: [ reference-add-cyclic ]
            template: rechunk
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ tasks.reference-add-cyclic.outputs.parameters.out-zarr }}"
                - name: time-chunk
                  value: 365
                - name: lat-chunk
                  value: -1
                - name: lon-chunk
                  value: -1
          - name: reference-regrid
            dependencies: [ reference-cyclic-rechunk ]
            template: regrid
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ tasks.reference-cyclic-rechunk.outputs.parameters.out-zarr }}"
                - name: regrid-method
                  value: "bilinear"
                - name: domain-file
                  value: "{{ workflow.parameters.domainfile1x1 }}"
          - name: reference-rechunk
            dependencies: [ reference-regrid ]
            template: rechunk
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ tasks.reference-regrid.outputs.parameters.out-zarr }}"
                - name: time-chunk
                  value: -1
                - name: lat-chunk
                  value: 10
                - name: lon-chunk
                  value: -1
          - name: gcm-historical-wetdaycorrect
            template: wdf-check
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ workflow.parameters.gcm-historical-zarr }}"
                - name: corrected-out-zarr
                  value: "az://scratch/{{ workflow.name }}/gcm-historical-wetcorrect.zarr"
                - name: uncorrected-out-zarr
                  value: "{{ workflow.parameters.gcm-historical-zarr }}"
                - name: process
                  value: pre
                - name: correct-bool
                  value: "{{ workflow.parameters.correct-wetday-frequency }}"
          - name: gcm-historical-add-cyclic
            dependencies: [ gcm-historical-wetdaycorrect ]
            template: add-cyclic
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ tasks.gcm-historical-wetdaycorrect.outputs.parameters.out-zarr }}"
          - name: gcm-historical-cyclic-rechunk
            dependencies: [ gcm-historical-add-cyclic ]
            template: rechunk
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ tasks.gcm-historical-add-cyclic.outputs.parameters.out-zarr }}"
                - name: time-chunk
                  value: 365
                - name: lat-chunk
                  value: -1
                - name: lon-chunk
                  value: -1
          - name: gcm-historical-regrid
            dependencies: [ gcm-historical-cyclic-rechunk ]
            template: regrid
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ tasks.gcm-historical-cyclic-rechunk.outputs.parameters.out-zarr }}"
                - name: regrid-method
                  value: "bilinear"
                - name: domain-file
                  value: "{{ workflow.parameters.domainfile1x1 }}"
          - name: gcm-historical-rechunk
            dependencies: [ gcm-historical-regrid ]
            template: rechunk
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ tasks.gcm-historical-regrid.outputs.parameters.out-zarr }}"
                - name: time-chunk
                  value: -1
                - name: lat-chunk
                  value: 10
                - name: lon-chunk
                  value: -1
          - name: gcm-training-wetdaycorrect
            template: wdf-check
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ workflow.parameters.gcm-training-zarr }}"
                - name: corrected-out-zarr
                  value: "az://scratch/{{ workflow.name }}/gcm-training-wetcorrect.zarr"
                - name: uncorrected-out-zarr
                  value: "{{ workflow.parameters.gcm-training-zarr }}"
                - name: process
                  value: pre
                - name: correct-bool
                  value: "{{ workflow.parameters.correct-wetday-frequency }}"
          - name: gcm-training-add-cyclic
            dependencies: [ gcm-training-wetdaycorrect ]
            template: add-cyclic
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ tasks.gcm-training-wetdaycorrect.outputs.parameters.out-zarr }}"
          - name: gcm-training-cyclic-rechunk
            dependencies: [ gcm-training-add-cyclic ]
            template: rechunk
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ tasks.gcm-training-add-cyclic.outputs.parameters.out-zarr }}"
                - name: time-chunk
                  value: 365
                - name: lat-chunk
                  value: -1
                - name: lon-chunk
                  value: -1
          - name: gcm-training-regrid
            dependencies: [ gcm-training-cyclic-rechunk ]
            template: regrid
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ tasks.gcm-training-cyclic-rechunk.outputs.parameters.out-zarr }}"
                - name: regrid-method
                  value: "bilinear"
                - name: domain-file
                  value: "{{ workflow.parameters.domainfile1x1 }}"
          - name: gcm-training-rechunk
            dependencies: [ gcm-training-regrid ]
            template: rechunk
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ tasks.gcm-training-regrid.outputs.parameters.out-zarr }}"
                - name: time-chunk
                  value: -1
                - name: lat-chunk
                  value: 10
                - name: lon-chunk
                  value: -1
          - name: gcm-future-wetdaycorrect
            template: wdf-check
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ workflow.parameters.gcm-future-zarr }}"
                - name: corrected-out-zarr
                  value: "az://scratch/{{ workflow.name }}/gcm-future-wetcorrect.zarr"
                - name: uncorrected-out-zarr
                  value: "{{ workflow.parameters.gcm-future-zarr }}"
                - name: process
                  value: pre
                - name: correct-bool
                  value: "{{ workflow.parameters.correct-wetday-frequency }}"
          - name: gcm-future-add-cyclic
            dependencies: [ gcm-future-wetdaycorrect ]
            template: add-cyclic
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ tasks.gcm-future-wetdaycorrect.outputs.parameters.out-zarr }}"
          - name: gcm-future-cyclic-rechunk
            dependencies: [ gcm-future-add-cyclic ]
            template: rechunk
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ tasks.gcm-future-add-cyclic.outputs.parameters.out-zarr }}"
                - name: time-chunk
                  value: 365
                - name: lat-chunk
                  value: -1
                - name: lon-chunk
                  value: -1
          - name: gcm-future-regrid
            dependencies: [ gcm-future-cyclic-rechunk ]
            template: regrid
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ tasks.gcm-future-cyclic-rechunk.outputs.parameters.out-zarr }}"
                - name: regrid-method
                  value: "bilinear"
                - name: domain-file
                  value: "{{ workflow.parameters.domainfile1x1 }}"
          - name: gcm-future-rechunk
            dependencies: [ gcm-future-regrid ]
            template: rechunk
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ tasks.gcm-future-regrid.outputs.parameters.out-zarr }}"
                - name: time-chunk
                  value: -1
                - name: lat-chunk
                  value: 10
                - name: lon-chunk
                  value: -1
          - name: biascorrect
            dependencies: [ gcm-training-rechunk, gcm-future-rechunk, reference-rechunk ]
            template: biascorrect-qdm
            arguments:
              parameters:
                - name: variable
                  value: "{{ workflow.parameters.target-variable }}"
                - name: ref-zarr
                  value: "{{ tasks.reference-rechunk.outputs.parameters.out-zarr }}"
                - name: train-zarr
                  value: "{{ tasks.gcm-training-rechunk.outputs.parameters.out-zarr }}"
                - name: simulation-zarr
                  value: "{{ tasks.gcm-future-rechunk.outputs.parameters.out-zarr }}"
                - name: out-zarr
                  value: "az://scratch/{{ workflow.name }}/biascorrected.zarr"
                - name: kind
                  value: "{{ workflow.parameters.biascorrect-kind }}"
                - name: first-year
                  value: "{{ workflow.parameters.biascorrect-firstfutureyear }}"
                - name: last-year
                  value: "{{ workflow.parameters.biascorrect-lastfutureyear }}"
          - name: rechunk-biascorrected
            template: rechunk
            dependencies: [ biascorrect ]
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ tasks.biascorrect.outputs.parameters.out-zarr }}"
                - name: time-chunk
                  value: 100
                - name: lat-chunk
                  value: -1
                - name: lon-chunk
                  value: -1
          - name: coarse-climatology-rechunk
            template: rechunk
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ workflow.parameters.climatology-zarr }}"
                - name: time-chunk
                  value: -1
                - name: lat-chunk
                  value: -1
                - name: lon-chunk
                  value: -1
                - name: time-dim-name
                  value: dayofyear
          - name: coarse-climatology-regrid
            template: regrid
            dependencies: [ coarse-climatology-rechunk ]
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ tasks.coarse-climatology-rechunk.outputs.parameters.out-zarr }}"
                - name: regrid-method
                  value: "bilinear"
                - name: domain-file
                  value: "{{ workflow.parameters.domainfile1x1 }}"
          - name: fine-climatology-rechunk
            template: rechunk
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ workflow.parameters.climatology-zarr }}"
                - name: time-chunk
                  value: 100
                - name: lat-chunk
                  value: -1
                - name: lon-chunk
                  value: -1
                - name: time-dim-name
                  value: dayofyear
          - name: fine-climatology-regrid
            template: regrid
            dependencies: [ fine-climatology-rechunk ]
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ tasks.fine-climatology-rechunk.outputs.parameters.out-zarr }}"
                - name: regrid-method
                  value: "bilinear"
                - name: domain-file
                  value: "{{ workflow.parameters.domainfile0p25x0p25 }}"
          - name: downscale
            template: downscale-bcsd
            dependencies: [ rechunk-biascorrected, fine-climatology-regrid, coarse-climatology-regrid ]
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ tasks.rechunk-biascorrected.outputs.parameters.out-zarr }}"
                - name: out-variable
                  value: "{{ workflow.parameters.target-variable }}"
                - name: train-variable
                  value: "temperature"
                - name: domain-file
                  value: "{{ workflow.parameters.domainfile0p25x0p25 }}"
                - name: yclimocoarse-zarr
                  value: "{{ tasks.coarse-climatology-regrid.outputs.parameters.out-zarr }}"
                - name: yclimofine-zarr
                  value: "{{ tasks.fine-climatology-regrid.outputs.parameters.out-zarr }}"
                - name: out-zarr
                  value: "az://scratch/{{ workflow.name }}/downscaled.zarr"
                - name: adjustmentfactors-out-zarr
                  value: "az://scratch/{{ workflow.name }}/downscale-adjustmentfactors.zarr"
          - name: downscaled-wetdaycorrect
            dependencies: [ downscale ]
            template: wdf-check
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ tasks.downscale.outputs.parameters.out-zarr }}"
                - name: corrected-out-zarr
                  value: "az://scratch/{{ workflow.name }}/downscaled-wetcorrect.zarr"
                - name: uncorrected-out-zarr
                  value: "az://scratch/{{ workflow.name }}/downscaled-final?.zarr"
                - name: process
                  value: post
                - name: correct-bool
                  value: "{{ workflow.parameters.correct-wetday-frequency }}"


    - name: regrid
      inputs:
        parameters:
          - name: in-zarr
          - name: out-zarr
            value: "az://scratch/{{ workflow.name }}/{{ pod.name }}/out.zarr"
          - name: regrid-method
          - name: domain-file
      outputs:
        parameters:
          - name: out-zarr
            value: "{{ inputs.parameters.out-zarr }}"
      container:
        image: downscalecmip6.azurecr.io/dodola:0.5.0
        env:
          - name: AZURE_STORAGE_ACCOUNT_NAME
            valueFrom:
              secretKeyRef:
                name: workerstoragecreds-secret
                key: azurestorageaccount
          - name: AZURE_STORAGE_ACCOUNT_KEY
            valueFrom:
              secretKeyRef:
                name: workerstoragecreds-secret
                key: azurestoragekey
        command: [ "dodola" ]
        args:
          - "regrid"
          - "{{ inputs.parameters.in-zarr }}"
          - "--astype=float32"
          - "--out"
          - "{{ inputs.parameters.out-zarr }}"
          - "--method"
          - "{{ inputs.parameters.regrid-method }}"
          - "--domain-file"
          - "{{ inputs.parameters.domain-file }}"
        resources:
          requests:
            memory: 48Gi
            cpu: "1000m"
          limits:
            memory: 48Gi
            cpu: "2000m"
      activeDeadlineSeconds: 3600
      retryStrategy:
        limit: 2
        retryPolicy: "Always"


    - name: rechunk
      inputs:
        parameters:
          - name: in-zarr
          - name: out-zarr
            value: "az://scratch/{{ workflow.name }}/{{ pod.name }}/out.zarr"
          - name: time-chunk
            value: 365
          - name: lat-chunk
            value: 10
          - name: lon-chunk
            value: 10
          - name: time-dim-name
            value: time
      outputs:
        parameters:
          - name: out-zarr
            value: "{{ inputs.parameters.out-zarr }}"
      container:
        image: downscalecmip6.azurecr.io/dodola:0.5.0
        env:
          - name: AZURE_STORAGE_ACCOUNT_NAME
            valueFrom:
              secretKeyRef:
                name: workerstoragecreds-secret
                key: azurestorageaccount
          - name: AZURE_STORAGE_ACCOUNT_KEY
            valueFrom:
              secretKeyRef:
                name: workerstoragecreds-secret
                key: azurestoragekey
        command: [ dodola ]
        args:
          - "rechunk"
          - "{{ inputs.parameters.in-zarr }}"
          - "--out"
          - "{{ inputs.parameters.out-zarr }}"
          - "--chunk"
          - "{{ inputs.parameters.time-dim-name }}={{ inputs.parameters.time-chunk }}"
          - "--chunk"
          - "lat={{ inputs.parameters.lat-chunk }}"
          - "--chunk"
          - "lon={{ inputs.parameters.lon-chunk }}"
        resources:
          requests:
            memory: 32Gi
            cpu: "1000m"
          limits:
            memory: 32Gi
            cpu: "2000m"
      activeDeadlineSeconds: 1800
      retryStrategy:
        limit: 1
        retryPolicy: "Always"


    - name: biascorrect-qdm
      inputs:
        parameters:
          - name: variable
          - name: ref-zarr
          - name: train-zarr
          - name: simulation-zarr
          - name: out-zarr
          - name: kind
          - name: first-year
          - name: last-year
      outputs:
        parameters:
          - name: out-zarr
            valueFrom:
              parameter: "{{ tasks.prime-output-zarrstore.outputs.parameters.out-zarr }}"
      dag:
        tasks:
          - name: prime-output-zarrstore
            template: prime-output-zarrstore
            arguments:
              parameters:
                - name: variable
                  value: "{{ inputs.parameters.variable }}"
                - name: simulation-zarr
                  value: "{{ inputs.parameters.simulation-zarr }}"
                - name: first-year
                  value: "{{ inputs.parameters.first-year }}"
                - name: last-year
                  value: "{{ inputs.parameters.last-year }}"
                - name: out-zarr
                  value: "{{ inputs.parameters.out-zarr }}"
          - name: with-lat-chunk
            depends: "prime-output-zarrstore"
            template: with-lat-chunk
            arguments:
              parameters:
                - name: variable
                  value: "{{ inputs.parameters.variable }}"
                - name: ref-zarr
                  value: "{{ inputs.parameters.ref-zarr }}"
                - name: train-zarr
                  value: "{{ inputs.parameters.train-zarr }}"
                - name: simulation-zarr
                  value: "{{ inputs.parameters.simulation-zarr }}"
                - name: first-year
                  value: "{{ inputs.parameters.first-year }}"
                - name: last-year
                  value: "{{ inputs.parameters.last-year }}"
                - name: kind
                  value: "{{ inputs.parameters.kind }}"
                - name: lat-slice-min
                  value: "{{=asInt(item) * 10 }}"
                - name: lat-slice-max
                  value: "{{=asInt(item) * 10 + 10 }}"
                - name: out-zarr
                  value: "{{ tasks.prime-output-zarrstore.outputs.parameters.out-zarr }}"
            withSequence:
              start: "0"
              end: "17"


    - name: prime-output-zarrstore
      inputs:
        parameters:
          - name: variable
          - name: simulation-zarr
          - name: first-year
          - name: last-year
          - name: out-zarr
            value: "az://scratch/{{ workflow.name }}/{{ pod.name }}/qdm_adjusted.zarr"
      outputs:
        parameters:
          - name: out-zarr
            value: "{{ inputs.parameters.out-zarr }}"
      script:
        image: downscalecmip6.azurecr.io/dodola:0.5.0
        env:
          - name: AZURE_STORAGE_ACCOUNT_NAME
            valueFrom:
              secretKeyRef:
                name: workerstoragecreds-secret
                key: azurestorageaccount
          - name: AZURE_STORAGE_ACCOUNT_KEY
            valueFrom:
              secretKeyRef:
                name: workerstoragecreds-secret
                key: azurestoragekey
        command: [ python ]
        source: |
          import dodola.repository
          import xarray as xr

          nonlat_variables = ["lon", "time"]

          simulation_zarr = "{{ inputs.parameters.simulation-zarr }}"
          out_zarr = "{{ inputs.parameters.out-zarr }}"
          first_year = int({{ inputs.parameters.first-year }})
          last_year = int({{ inputs.parameters.last-year }})
          variable = "{{ inputs.parameters.variable }}"

          timeslice = slice(str(first_year), str(last_year + 1))

          primed_out = dodola.repository.read(simulation_zarr).sel(time=timeslice).chunk({"time": -1, "lat": 10, "lon":-1})

          print(primed_out)  # DEBUG

          primed_out.to_zarr(
            out_zarr,
            mode="w",
            compute=False,
            consolidated=True,
          )
          print(f"Output written to {out_zarr}")  # DEBUG

          # Append variables that do not depend on "lat"
          if nonlat_variables:
              primed_out[nonlat_variables].to_zarr(
                  out_zarr,
                  mode="a",
                  compute=True,
                  consolidated=True
              )
        resources:
          requests:
            memory: 4Gi
            cpu: "1000m"
          limits:
            memory: 4Gi
            cpu: "1000m"
      activeDeadlineSeconds: 900
      retryStrategy:
        limit: 1
        retryPolicy: "Always"


    - name: with-lat-chunk
      inputs:
        parameters:
          - name: variable
          - name: ref-zarr
          - name: train-zarr
          - name: simulation-zarr
          - name: out-zarr
          - name: kind
          - name: lat-slice-min
          - name: lat-slice-max
          - name: first-year
          - name: last-year
      outputs:
        parameters:
          - name: out-zarr
            valueFrom:
              parameter: "{{ tasks.apply-qdm.outputs.parameters.out-zarr }}"
      dag:
        tasks:
          - name: train-qdm
            template: train-qdm
            arguments:
              parameters:
                - name: variable
                  value: "{{ inputs.parameters.variable }}"
                - name: ref-zarr
                  value: "{{ inputs.parameters.ref-zarr }}"
                - name: train-zarr
                  value: "{{ inputs.parameters.train-zarr }}"
                - name: kind
                  value: "{{ inputs.parameters.kind }}"
                - name: lat-slice-min
                  value: "{{ inputs.parameters.lat-slice-min }}"
                - name: lat-slice-max
                  value: "{{ inputs.parameters.lat-slice-max }}"
          - name: apply-qdm
            depends: "train-qdm"
            template: apply-qdm
            arguments:
              parameters:
                - name: variable
                  value: "{{ inputs.parameters.variable }}"
                - name: qdm-zarr
                  value: "{{ tasks.train-qdm.outputs.parameters.out-zarr }}"
                - name: simulation-zarr
                  value: "{{ inputs.parameters.simulation-zarr }}"
                - name: first-year
                  value: "{{ inputs.parameters.first-year }}"
                - name: last-year
                  value: "{{ inputs.parameters.last-year }}"
                - name: lat-slice-min
                  value: "{{ inputs.parameters.lat-slice-min }}"
                - name: lat-slice-max
                  value: "{{ inputs.parameters.lat-slice-max }}"
                - name: out-zarr
                  value: "{{ inputs.parameters.out-zarr }}"

    - name: train-qdm
      inputs:
        parameters:
          - name: variable
          - name: ref-zarr
          - name: train-zarr
          - name: kind
          - name: lat-slice-min
          - name: lat-slice-max
          - name: out-zarr
            value: "az://scratch/{{ workflow.name }}/{{ pod.name }}/qdm_model.zarr"
      outputs:
        parameters:
          - name: out-zarr
            value: "{{ inputs.parameters.out-zarr }}"
      script:
        image: downscalecmip6.azurecr.io/dodola:0.5.0
        env:
          - name: AZURE_STORAGE_ACCOUNT_NAME
            valueFrom:
              secretKeyRef:
                name: workerstoragecreds-secret
                key: azurestorageaccount
          - name: AZURE_STORAGE_ACCOUNT_KEY
            valueFrom:
              secretKeyRef:
                name: workerstoragecreds-secret
                key: azurestoragekey
        command: [ python ]
        source: |
          import os
          import dodola.repository
          from dodola.core import train_quantiledeltamapping

          kind_map = {"multiplicative": "*", "additive": "+"}

          ref_zarr = "{{ inputs.parameters.ref-zarr }}"
          train_zarr = "{{ inputs.parameters.train-zarr }}"
          out_zarr = "{{ inputs.parameters.out-zarr }}"
          min_slice = int({{ inputs.parameters.lat-slice-min }})
          max_slice = int({{ inputs.parameters.lat-slice-max }})
          variable = "{{ inputs.parameters.variable }}"
          kind = kind_map["{{ inputs.parameters.kind }}"]

          latslice = slice(min_slice, max_slice)

          print(f"reading {ref_zarr}")
          reference = dodola.repository.read(ref_zarr).isel(lat=latslice)
          print(f"reading {train_zarr}")
          training = dodola.repository.read(train_zarr).isel(lat=latslice)

          reference.load()
          training.load()

          qdm = train_quantiledeltamapping(
              reference=reference,
              historical=training,
              variable=variable,
              kind=kind,
          )

          dodola.repository.write(out_zarr, qdm.ds)
          print(f"Output written to {out_zarr}")  # DEBUG
        resources:
          requests:
            memory: 8Gi
            cpu: "1000m"
          limits:
            memory: 8Gi
            cpu: "2000m"
      activeDeadlineSeconds: 900
      retryStrategy:
        limit: 1
        retryPolicy: "Always"


    - name: apply-qdm
      inputs:
        parameters:
          - name: variable
          - name: qdm-zarr
          - name: simulation-zarr
          - name: first-year
          - name: last-year
          - name: lat-slice-min
          - name: lat-slice-max
          - name: out-zarr
            value: "az://scratch/{{ workflow.name }}/{{ pod.name }}/qdm_adjusted.zarr"
      outputs:
        parameters:
          - name: out-zarr
            value: "{{ inputs.parameters.out-zarr }}"
      script:
        image: downscalecmip6.azurecr.io/dodola:0.5.0
        env:
          - name: AZURE_STORAGE_ACCOUNT_NAME
            valueFrom:
              secretKeyRef:
                name: workerstoragecreds-secret
                key: azurestorageaccount
          - name: AZURE_STORAGE_ACCOUNT_KEY
            valueFrom:
              secretKeyRef:
                name: workerstoragecreds-secret
                key: azurestoragekey
        command: [ python ]
        source: |
          import dask.delayed
          import dodola.repository
          from dodola.core import adjust_quantiledeltamapping_year
          import xarray as xr

          nonlat_variables = ["lon", "time"]

          qdm_zarr = "{{ inputs.parameters.qdm-zarr }}"
          simulation_zarr = "{{ inputs.parameters.simulation-zarr }}"
          out_zarr = "{{ inputs.parameters.out-zarr }}"
          min_slice = int({{ inputs.parameters.lat-slice-min }})
          max_slice = int({{ inputs.parameters.lat-slice-max }})
          first_year = int({{ inputs.parameters.first-year }})
          last_year = int({{ inputs.parameters.last-year }})
          variable = "{{ inputs.parameters.variable }}"

          latslice = slice(min_slice, max_slice)

          print(f"slicing({min_slice}, {max_slice})")  # DEBUG

          qdm = dodola.repository.read(qdm_zarr)
          simulation = dodola.repository.read(simulation_zarr).isel(lat=latslice)

          qdm.load()
          simulation.load()
          simulation_delayed = dask.delayed(simulation)
          qdm_delayed = dask.delayed(qdm)

          qdm_list = []
          for year in range(first_year, last_year + 1):
              adj = dask.delayed(adjust_quantiledeltamapping_year)(simulation_delayed, qdm_delayed, year, variable)
              qdm_list.append(adj)

          out_all_years = dask.delayed(xr.concat)(qdm_list, dim="time")
          out_all_years = out_all_years.compute()

          print(out_all_years)  # DEBUG

          if nonlat_variables:
              out_all_years = out_all_years.drop_vars(nonlat_variables)

          out_all_years = out_all_years.transpose("time", "lat", "lon")

          # Output to region of existing zarr store.
          out_all_years.to_zarr(out_zarr, region={"lat": latslice}, mode="a")
          print(f"Output written to {out_zarr}")  # DEBUG
        resources:
          requests:
            memory: 32Gi
            cpu: "1000m"
          limits:
            memory: 32Gi
            cpu: "8000m"
      activeDeadlineSeconds: 900
      retryStrategy:
        limit: 3
        retryPolicy: "Always"


    - name: downscale-bcsd
      inputs:
        parameters:
          - name: in-zarr
            value: "az://scratch/dc6-dev-75bpr/fine-climatology-regrid.zarr"
          - name: domain-file
            value: "{{ workflow.parameters.domainfile0p25x0p25 }}"
          - name: yclimocoarse-zarr
            value: "az://scratch/dc6-dev-75bpr/coarse-climatology-regrid.zarr"
          - name: yclimofine-zarr
            value: "az://scratch/dc6-dev-75bpr/fine-climatology-regrid.zarr"
          - name: train-variable
            value: "temperature"
          - name: out-variable
            value: "tasmax"
          - name: adjustmentfactors-out-zarr
            value: "az://scatch/{{ workflow.name }}/af.zarr"
          - name: out-zarr
            value: "az://scatch/{{ workflow.name }}/downscaled.zarr"
      outputs:
        parameters:
          - name: out-zarr
            valueFrom:
              parameter: "{{ inputs.parameters.out-zarr }}"
          - name: adjustmentfactors-out-zarr
            valueFrom:
              parameter: "{{ inputs.parameters.adjustmentfactors-out-zarr }}"
      dag:
        tasks:
          - name: rename-main-ds
            template: downscaler-rename
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ inputs.parameters.in-zarr }}"
                - name: rename-from
                  value: "{{ inputs.parameters.out-variable }}"
                - name: rename-to
                  value: "{{ inputs.parameters.train-variable }}"
          - name: rename-coarseclimo-ds
            template: downscaler-rename
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ inputs.parameters.yclimocoarse-zarr }}"
                - name: rename-from
                  value: "{{ inputs.parameters.out-variable }}"
                - name: rename-to
                  value: "{{ inputs.parameters.train-variable }}"
          - name: rename-fineclimo-ds
            template: downscaler-rename
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ inputs.parameters.yclimofine-zarr }}"
                - name: rename-from
                  value: "{{ inputs.parameters.out-variable }}"
                - name: rename-to
                  value: "{{ inputs.parameters.train-variable }}"
          - name: fit-adjustmentfactors
            template: fit-adjustmentfactors
            dependencies: [ rename-main-ds, rename-coarseclimo-ds ]
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ tasks.rename-main-ds.outputs.parameters.out-zarr }}"
                - name: train-variable
                  value: "{{ inputs.parameters.train-variable }}"
                - name: yclimocoarse-zarr
                  value: "{{ tasks.rename-coarseclimo-ds.outputs.parameters.out-zarr }}"
          - name: regrid-adjustmentfactors
            template: regrid
            dependencies: [ fit-adjustmentfactors ]
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ tasks.fit-adjustmentfactors.outputs.parameters.out-zarr }}"
                - name: regrid-method
                  value: "bilinear"
                - name: domain-file
                  value: "{{ inputs.parameters.domain-file }}"
          - name: apply-adjustmentfactors
            template: apply-adjustmentfactors
            dependencies: [ regrid-adjustmentfactors, rename-fineclimo-ds ]
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ tasks.regrid-adjustmentfactors.outputs.parameters.out-zarr }}"
                - name: out-variable
                  value: "{{ inputs.parameters.out-variable }}"
                - name: train-variable
                  value: "{{ inputs.parameters.train-variable }}"
                - name: yclimofine-zarr
                  value: "{{ tasks.rename-fineclimo-ds.outputs.parameters.out-zarr }}"
                - name: out-zarr
                  value: "{{ inputs.parameters.out-zarr }}"


    - name: fit-adjustmentfactors
      inputs:
        parameters:
          - name: in-zarr
          - name: yclimocoarse-zarr
          - name: train-variable
          - name: out-zarr
            value: "az://scratch/{{ workflow.name }}/{{ pod.name }}/out.zarr"
      outputs:
        parameters:
          - name: out-zarr
            value: "{{ inputs.parameters.out-zarr }}"
      script:
        image: downscalecmip6.azurecr.io/dodola:0.5.0
        env:
          - name: IN_ZARR
            value: "{{ inputs.parameters.in-zarr }}"
          - name: CLIMO_ZARR
            value: "{{ inputs.parameters.yclimocoarse-zarr }}"
          - name: TRAIN_VARIABLE
            value: "{{ inputs.parameters.train-variable }}"
          - name: OUT_ZARR
            value: "{{ inputs.parameters.out-zarr }}"
          - name: AZURE_STORAGE_ACCOUNT_NAME
            valueFrom:
              secretKeyRef:
                name: workerstoragecreds-secret
                key: azurestorageaccount
          - name: AZURE_STORAGE_ACCOUNT_KEY
            valueFrom:
              secretKeyRef:
                name: workerstoragecreds-secret
                key: azurestoragekey
        command: [ python ]
        source: |
          import os
          import xarray as xr
          from skdownscale.spatial_models import SpatialDisaggregator

          in_store_path = os.environ.get("IN_ZARR")
          climo_path = os.environ.get("CLIMO_ZARR")
          train_variable = os.environ.get("TRAIN_VARIABLE")
          out_path = os.environ.get("OUT_ZARR")

          ds = xr.open_zarr(in_store_path)
          print(f"read {in_store_path}")
          obs_climo_coarse = xr.open_zarr(climo_path)
          print(f"read {climo_path}")

          sd = SpatialDisaggregator(var=train_variable)
          af = sd.fit(ds, obs_climo_coarse, var_name=train_variable)
          print("spatial disaggregation fit")

          af.to_zarr(
              out_path,
              mode="w",
              encoding={  # Change chunking to make it easier to regrid to quarter degree.
                  "time": {"chunks": (100,)},
                  "lat": {"chunks": (-1,)},
                  "lon": {"chunks": (-1,)},
                  "dayofyear": {"chunks": (100,)}
              }
          )
          print(f"written to {out_path}")
        resources:
          requests:
            memory: 24Gi
            cpu: "1000m"
          limits:
            memory: 24Gi
            cpu: "3000m"
      activeDeadlineSeconds: 4200  # 12 hours


    - name: rechunk-adjustmentfactors
      inputs:
        parameters:
          - name: in-zarr
          - name: out-zarr
            value: "az://scratch/{{ workflow.name }}/{{ pod.name }}/out.zarr"
          - name: time-chunk
            value: 365
          - name: lat-chunk
            value: 10
          - name: lon-chunk
            value: 10
          - name: dayofyear-chunk
            value: 365
      outputs:
        parameters:
          - name: out-zarr
            value: "{{ inputs.parameters.out-zarr }}"
      container:
        image: downscalecmip6.azurecr.io/dodola:0.5.0
        env:
          - name: AZURE_STORAGE_ACCOUNT_NAME
            valueFrom:
              secretKeyRef:
                name: workerstoragecreds-secret
                key: azurestorageaccount
          - name: AZURE_STORAGE_ACCOUNT_KEY
            valueFrom:
              secretKeyRef:
                name: workerstoragecreds-secret
                key: azurestoragekey
        command: [ dodola ]
        args:
          - "rechunk"
          - "{{ inputs.parameters.in-zarr }}"
          - "--out"
          - "{{ inputs.parameters.out-zarr }}"
          - "--chunk"
          - "time={{ inputs.parameters.time-chunk }}"
          - "--chunk"
          - "lat={{ inputs.parameters.lat-chunk }}"
          - "--chunk"
          - "lon={{ inputs.parameters.lon-chunk }}"
          - "--chunk"
          - "dayofyear={{ inputs.parameters.dayofyear-chunk }}"
        resources:
          requests:
            memory: 32Gi
            cpu: "1000m"
          limits:
            memory: 32Gi
            cpu: "2000m"
      activeDeadlineSeconds: 10800


    - name: apply-adjustmentfactors
      inputs:
        parameters:
          - name: in-zarr
          - name: yclimofine-zarr
          - name: train-variable
          - name: out-variable
          - name: out-zarr
            value: "az://scratch/{{ workflow.name }}/{{ pod.name }}/out.zarr"
      outputs:
        parameters:
          - name: out-zarr
            value: "{{ inputs.parameters.out-zarr }}"
      script:
        image: downscalecmip6.azurecr.io/dodola:0.5.0
        env:
          - name: IN_ZARR
            value: "{{ inputs.parameters.in-zarr }}"
          - name: CLIMO_ZARR
            value: "{{ inputs.parameters.yclimofine-zarr }}"
          - name: TRAIN_VARIABLE
            value: "{{ inputs.parameters.train-variable }}"
          - name: OUT_VARIABLE
            value: "{{ inputs.parameters.out-variable }}"
          - name: OUT_ZARR
            value: "{{ inputs.parameters.out-zarr }}"
          - name: AZURE_STORAGE_ACCOUNT_NAME
            valueFrom:
              secretKeyRef:
                name: workerstoragecreds-secret
                key: azurestorageaccount
          - name: AZURE_STORAGE_ACCOUNT_KEY
            valueFrom:
              secretKeyRef:
                name: workerstoragecreds-secret
                key: azurestoragekey
        command: [ python ]
        source: |
          import os
          import xarray as xr
          from skdownscale.spatial_models import SpatialDisaggregator

          in_store_path = os.environ.get("IN_ZARR")
          climo_path = os.environ.get("CLIMO_ZARR")
          train_variable = os.environ.get("TRAIN_VARIABLE")
          out_variable = os.environ.get("OUT_VARIABLE")
          out_path = os.environ.get("OUT_ZARR")

          af = xr.open_zarr(in_store_path)
          print(f"read {in_store_path}")
          obs_climo_fine = xr.open_zarr(climo_path)
          print(f"read {climo_path}")

          sd = SpatialDisaggregator(var=train_variable)
          out = model.predict(af, obs_climo_fine[train_variable], var_name=train_variable)
          print("spatial disaggregation adjustment factors applied")

          out.to_dataset(name=out_variable).to_zarr(out_path, mode="w")
          print(f"written to {out_path}")
        resources:
          requests:
            memory: 42Gi
            cpu: "1000m"
          limits:
            memory: 42Gi
            cpu: "2000m"
      activeDeadlineSeconds: 43200  # 12 hours


    - name: downscaler-rename
      inputs:
        parameters:
          - name: in-zarr
          - name: rename-from
          - name: rename-to
          - name: out-zarr
            value: "az://scratch/{{ workflow.name }}/{{ pod.name }}/out.zarr"
      outputs:
        parameters:
          - name: out-zarr
            value: "{{ inputs.parameters.out-zarr }}"
      script:
        image: downscalecmip6.azurecr.io/dodola:0.5.0
        env:
          - name: IN_ZARR
            value: "{{  inputs.parameters.in-zarr }}"
          - name: RENAME_FROM
            value: "{{  inputs.parameters.rename-from }}"
          - name: RENAME_TO
            value: "{{  inputs.parameters.rename-to }}"
          - name: OUT_ZARR
            value: "{{  inputs.parameters.out-zarr }}"
          - name: PYTHONUNBUFFERED
            value: "1"
          - name: AZURE_STORAGE_ACCOUNT_NAME
            valueFrom:
              secretKeyRef:
                name: workerstoragecreds-secret
                key: azurestorageaccount
          - name: AZURE_STORAGE_ACCOUNT_KEY
            valueFrom:
              secretKeyRef:
                name: workerstoragecreds-secret
                key: azurestoragekey
          - name: PYTHONUNBUFFERED
            value: "1"
        command: [ python ]
        source: |
          import os
          import xarray as xr


          in_store_path = os.environ.get("IN_ZARR")
          out_store_path = os.environ.get("OUT_ZARR")
          rename_from = os.environ.get("RENAME_FROM")
          rename_to = os.environ.get("RENAME_TO")

          ds = xr.open_zarr(in_store_path)
          print(f"opening {in_store_path}")

          ds = ds.rename({rename_from: rename_to})

          ds.to_zarr(out_store_path, mode="w")
          print(f"written to {out_store_path}")
        resources:
          requests:
            memory: 24Gi
            cpu: "200m"
          limits:
            memory: 24Gi
            cpu: "2000m"
      activeDeadlineSeconds: 1800
      retryStrategy:
        limit: 3
        retryPolicy: "Always"


    # Easier way to do conditional wet day frequency in Argo 3.1. This evaluates whether we do wet day frequency
    # correction or not and outputs the location of the corrected or uncorrected file if appropriate.
    # It's pretty clunky. Sorry. There has to be a better way to do this.
    - name: wdf-check
      inputs:
        parameters:
          - name: in-zarr
          - name: corrected-out-zarr  # If wetday freq corrected, write this zarr store
          - name: uncorrected-out-zarr  # If not wetday freq corrected, give this path.
          - name: process  # "pre" or "post"
          - name: correct-bool  # Do the correction? true or false
      steps:
        - - name: correct-wetday-frequency
            template: correct-wetday-frequency
            when: "{{ inputs.parameters.correct-bool }} == true"
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ inputs.parameters.in-zarr }}"
                - name: out-zarr
                  value: "{{ inputs.parameters.out-zarr }}"
                - name: process  # pre or post
                  value: "{{ inputs.parameters.process }}"
      outputs:
        parameters:
          - name: out-zarr
            valueFrom:
              expression: "inputs.parameters['correct-bool'] == true ? steps.correct-wetday-frequency.outputs.parameters['out-zarr'] : inputs.parameters['uncorrected-out-zarr']"


    - name: correct-wetday-frequency
      inputs:
        parameters:
          - name: in-zarr
          - name: out-zarr
            value: "az://scratch/{{ workflow.name }}/{{ pod.name }}/out.zarr"
          - name: process  # pre or post
      outputs:
        parameters:
          - name: out-zarr
            value: "{{ inputs.parameters.out-zarr }}"
      container:
        image: downscalecmip6.azurecr.io/dodola:0.5.0
        env:
          - name: AZURE_STORAGE_ACCOUNT_NAME
            valueFrom:
              secretKeyRef:
                name: workerstoragecreds-secret
                key: azurestorageaccount
          - name: AZURE_STORAGE_ACCOUNT_KEY
            valueFrom:
              secretKeyRef:
                name: workerstoragecreds-secret
                key: azurestoragekey
        command: [ dodola ]
        args:
          - "correct-wetday-frequency"
          - "{{ inputs.parameters.in-zarr }}"
          - "--out"
          - "{{ inputs.parameters.out-zarr }}"
          - "--process"
          - "{{ inputs.parameters.process }}"
        resources:
          requests:
            memory: 8Gi
            cpu: "1000m"
          limits:
            memory: 8Gi
            cpu: "2000m"
      activeDeadlineSeconds: 600
      retryStrategy:
        limit: 3
        retryPolicy: "Always"


    - name: add-cyclic
      inputs:
        parameters:
          - name: in-zarr
          - name: out-zarr
            value: "az://scratch/{{ workflow.name }}/{{ pod.name }}/out.zarr"
      outputs:
        parameters:
          - name: out-zarr
            value: "{{ inputs.parameters.out-zarr }}"
      script:
        image: downscalecmip6.azurecr.io/dodola:0.5.0
        env:
          - name: IN
            value: "{{ inputs.parameters.in-zarr }}"
          - name: OUT
            value: "{{ inputs.parameters.out-zarr }}"
          - name: AZURE_STORAGE_ACCOUNT_NAME
            valueFrom:
              secretKeyRef:
                name: workerstoragecreds-secret
                key: azurestorageaccount
          - name: AZURE_STORAGE_ACCOUNT_KEY
            valueFrom:
              secretKeyRef:
                name: workerstoragecreds-secret
                key: azurestoragekey
        command: [ python ]
        source: |
          import os
          import dodola.repository as storage
          from dodola.core import _add_cyclic

          ds = storage.read(os.environ.get("IN"))
          ds = _add_cyclic(ds, dim="lon")
          storage.write(os.environ.get("OUT"), ds)
        resources:
          requests:
            memory: 32Gi
            cpu: "1000m"
          limits:
            memory: 32Gi
            cpu: "4000m"
      activeDeadlineSeconds: 480
      retryStrategy:
        limit: 4
        retryPolicy: "Always"


    # Prints data on stored zarr file to log.
    - name: printzarr
      inputs:
        parameters:
          - name: in-zarr
      script:
        image: downscalecmip6.azurecr.io/dodola:0.5.0
        env:
          - name: IN_ZARR
            value: "{{ inputs.parameters.in-zarr }}"
          - name: AZURE_STORAGE_ACCOUNT_NAME
            valueFrom:
              secretKeyRef:
                name: workerstoragecreds-secret
                key: azurestorageaccount
          - name: AZURE_STORAGE_ACCOUNT_KEY
            valueFrom:
              secretKeyRef:
                name: workerstoragecreds-secret
                key: azurestoragekey
        command: [ python ]
        source: |
          # Real workflow begins here:
          import os
          import xarray as xr

          target = os.environ.get("IN_ZARR")
          print(f"opening {target}")

          d = xr.open_zarr(target)

          print(d)
        resources:
          requests:
            memory: 500Mi
            cpu: "1000m"
          limits:
            memory: 1Gi
            cpu: "1000m"
      activeDeadlineSeconds: 900
