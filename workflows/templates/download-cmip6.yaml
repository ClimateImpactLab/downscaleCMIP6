apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: download-cmip6
  labels:
    component: download-cmip6
spec:
  workflowMetadata:
    labels:
      component: download-cmip6
  entrypoint: with-jobs
  arguments:
    parameters:
      - name: overwrite
        value: "false"
      - name: jobs
        value: |
          [
            {
              "target": "ssp",
              "variable_id": "tasmax",
              "historical": {
                "activity_id": "CMIP",
                "experiment_id": "historical",
                "table_id": "day",
                "variable_id": "tasmax",
                "source_id": "GFDL-ESM4",
                "institution_id": "NOAA-GFDL",
                "member_id": "r1i1p1f1",
                "grid_label": "gr1",
                "version": "20190726"
              },
              "ssp": {
                "activity_id": "ScenarioMIP",
                "experiment_id": "ssp370",
                "table_id": "day",
                "variable_id": "tasmax",
                "source_id": "GFDL-ESM4",
                "institution_id": "NOAA-GFDL",
                "member_id": "r1i1p1f1",
                "grid_label": "gr1",
                "version": "20180701"
              }
            }
          ]
  templates:


      # For each job, combine the ssp and historical specifications into a single JSON list.
    - name: with-jobs
      inputs:
        parameters:
          - name: jobs
      steps:
        - - name: divide
            template: with-specification
            arguments:
              parameters:
                - name: simulations
                  value: "[{{ item.ssp }}, {{ item.historical }}]"
            withParam: "{{ inputs.parameters.jobs }}"


      # Break each specification into its components.
    - name: with-specification
      inputs:
        parameters:
          - name: simulations
      steps:
        - - name: process
            template: download-cmip6
            arguments:
              parameters:
                - name: experiment-id
                  value: "{{item.experiment_id}}"
                - name: activity-id
                  value: "{{item.activity_id}}"
                - name: table-id
                  value: "{{item.table_id}}"
                - name: variable-id
                  value: "{{item.variable_id}}"
                - name: source-id
                  value: "{{item.source_id}}"
                - name: institution-id
                  value: "{{item.institution_id}}"
                - name: member-id
                  value: "{{item.member_id}}"
                - name: grid-label
                  value: "{{item.grid_label}}"
                - name: version
                  value: "{{item.version}}"
            withParam: "{{ inputs.parameters.simulations }}"


    - name: download-cmip6
      inputs:
        parameters:
          - name: experiment-id
          - name: activity-id
          - name: table-id
          - name: variable-id
          - name: source-id
          - name: institution-id
          - name: member-id
          - name: grid-label
          - name: version
      outputs:
        parameters:
          - name: out-zarr
            valueFrom:
              parameter: "{{ steps.download.outputs.parameters.out-zarr }}"
      steps:
        - - name: get-destination-url
            templateRef:
              name: catalog
              template: get-fsspec-url-from-parameters
            arguments:
              parameters:
                - name: experiment-id
                  value: "{{inputs.parameters.experiment-id}}"
                - name: activity-id
                  value: "{{inputs.parameters.activity-id}}"
                - name: table-id
                  value: "{{inputs.parameters.table-id}}"
                - name: variable-id
                  value: "{{inputs.parameters.variable-id}}"
                - name: source-id
                  value: "{{inputs.parameters.source-id}}"
                - name: institution-id
                  value: "{{inputs.parameters.institution-id}}"
                - name: member-id
                  value: "{{inputs.parameters.member-id}}"
                - name: grid-label
                  value: "{{inputs.parameters.grid-label}}"
                - name: version
                  value: "{{inputs.parameters.version}}"
                - name: base-url
                  value: "gs://raw-cmip6-20210922"
        - - name: download
            template: download-gcm
            arguments:
              parameters:
                - name: experiment-id
                  value: "{{inputs.parameters.experiment-id}}"
                - name: activity-id
                  value: "{{inputs.parameters.activity-id}}"
                - name: table-id
                  value: "{{inputs.parameters.table-id}}"
                - name: variable-id
                  value: "{{inputs.parameters.variable-id}}"
                - name: source-id
                  value: "{{inputs.parameters.source-id}}"
                - name: institution-id
                  value: "{{inputs.parameters.institution-id}}"
                - name: member-id
                  value: "{{inputs.parameters.member-id}}"
                - name: grid-label
                  value: "{{inputs.parameters.grid-label}}"
                - name: version
                  value: "{{inputs.parameters.version}}"
                - name: out-url
                  value: "{{ steps.get-destination-url.outputs.parameters.out-url }}"


    - name: download-gcm
      inputs:
        parameters:
          - name: experiment-id
          - name: activity-id
          - name: table-id
          - name: variable-id
          - name: source-id
          - name: institution-id
          - name: member-id
          - name: grid-label
          - name: version
          - name: out-url
          - name: overwrite
            value: "{{workflow.parameters.overwrite}}"
      outputs:
        parameters:
          - name: out-zarr
            value: "{{ inputs.parameters.out-url }}"
      script:
        image: us-docker.pkg.dev/compute-impactlab/public/dodola:0.6.0
        env:
          - name: ACTIVITY_ID
            value: "{{inputs.parameters.activity-id}}"
          - name: EXPERIMENT_ID
            value: "{{inputs.parameters.experiment-id}}"
          - name: TABLE_ID
            value: "{{inputs.parameters.table-id}}"
          - name: VARIABLE_ID
            value: "{{inputs.parameters.variable-id}}"
          - name: SOURCE_ID
            value: "{{inputs.parameters.source-id}}"
          - name: INSTITUTION_ID
            value: "{{inputs.parameters.institution-id}}"
          - name: MEMBER_ID
            value: "{{inputs.parameters.member-id}}"
          - name: GRID_LABEL
            value: "{{inputs.parameters.grid-label}}"
          - name: INTAKE_VERSION
            value: "{{inputs.parameters.version}}"
          - name: OUTPATH
            value: "{{inputs.parameters.out-url}}"
        command: [python]
        source: |
          import os
          from pprint import pprint
          import intake
          import zarr

          outpath = os.environ.get("OUTPATH")
          overwrite = "{{ inputs.parameters.overwrite }}".lower() == "true"

          print("Searching catalog")
          col = intake.open_esm_datastore("https://storage.googleapis.com/cmip6/pangeo-cmip6.json")
          cat = col.search(
              activity_id=os.environ.get("ACTIVITY_ID"),
              experiment_id=os.environ.get("EXPERIMENT_ID"),
              table_id=os.environ.get("TABLE_ID"),
              variable_id=os.environ.get("VARIABLE_ID"),
              source_id=os.environ.get("SOURCE_ID"),
              member_id=os.environ.get("MEMBER_ID"),
              grid_label=os.environ.get("GRID_LABEL"),
              version=int(os.environ.get("INTAKE_VERSION")),
          )
          d = cat.to_dataset_dict(progressbar=False)
          k = list(d.keys())
          if len(k) != 1:
              raise ValueError("catalog does not have one entry, reconsider input IDs so only one entry")
          print(f"Found one catalog entry {k}")
          print(d)

          # Print out global and variable metadata (attrs).
          pprint(d[k[0]].attrs)
          for vname, v in d[k[0]].variables.items():
              print("\n", vname)
              pprint(v.attrs)

          write_mode = "w-"
          if overwrite:
            write_mode = "w"
          try:
              d[k[0]].to_zarr(outpath, mode=write_mode, compute=True)
              print(f"Written to {outpath}")
          except (zarr.errors.ContainsGroupError):
            print(f"Skipping overwrite to existing Zarr Store at {outpath}")
        resources:
          requests:
            memory: 12Gi
            cpu: "200m"
          limits:
            # Historical EC-Earth-Consortium requires memory this high unless we stream.
            memory: 32Gi
            cpu: "6000m"
      activeDeadlineSeconds: 1500
      retryStrategy:
        limit: 4
        retryPolicy: "Always"
        backoff:
          duration: 30s
          factor: 2
