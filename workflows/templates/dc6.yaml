apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: dc6
  labels:
    component: dc6
spec:
  workflowMetadata:
    labels:
      component: dc6
  entrypoint: biascorrect-variable
  arguments:
    parameters:
      - name: variable-id
        value: "tasmin"
      - name: source-id
        value: "GFDL-ESM4"
      - name: ssps
        value: |
          [
            { "activity-id": "ScenarioMIP", "experiment-id": "ssp370", "table-id": "day", "variable-id": "tasmin", "source-id": "GFDL-ESM4", "institution-id": "NOAA-GFDL", "member-id": "r1i1p1f1", "grid-label": "gr1", "version": "20180701" },
            { "activity-id": "ScenarioMIP", "experiment-id": "ssp245", "table-id": "day", "variable-id": "tasmin", "source-id": "GFDL-ESM4", "institution-id": "NOAA-GFDL", "member-id": "r1i1p1f1", "grid-label": "gr1", "version": "20180701" },
            { "activity-id": "ScenarioMIP", "experiment-id": "ssp126", "table-id": "day", "variable-id": "tasmin", "source-id": "GFDL-ESM4", "institution-id": "NOAA-GFDL", "member-id": "r1i1p1f1", "grid-label": "gr1", "version": "20180701" }
          ]
      - name: regrid-method
        value: "bilinear"
      - name: correct-wetday-frequency  # "true" or "false" STRING!
        value: "false"
      - name: domainfile1x1
        value: "az://support/domain.1x1.zarr"
      - name: qdm-kind #additive or multiplicative
        value: "additive"
  templates:

    - name: biascorrect-variable
      inputs:
        parameters:
          - name: variable-id
          - name: source-id
          - name: ssps
          - name: regrid-method
          - name: correct-wetday-frequency
          - name: domainfile1x1
          - name: qdm-kind
      dag:
        tasks:
          - name: preprocess-historical
            template: preprocess
            arguments:
              parameters:
                - name: in-zarr
                  value: "az://clean/{{ inputs.parameters.source-id }}/historical/{{ inputs.parameters.variable-id }}.zarr"
                - name: regrid-method
                  value: "{{ inputs.parameters.regrid-method }}"
                - name: domain-file
                  value: "{{ inputs.parameters.domainfile1x1 }}"
                - name: correct-wetday-frequency
                  value: "{{ inputs.parameters.correct-wetday-frequency }}"
          - name: preprocess-reference
            template: preprocess-reference
            arguments:
              parameters:
                - name: in-zarr
                  value: "az://scratch/clean-dev/ERA-5/{{ inputs.parameters.variable-id }}.1995-2015.F320.zarr"
                - name: regrid-method
                  value: "{{ inputs.parameters.regrid-method }}"
                - name: domain-file
                  value: "{{ inputs.parameters.domainfile1x1 }}"
          - name: preprocess-training
            template: preprocess
            arguments:
              parameters:
                - name: in-zarr
                  value: "az://clean/{{ inputs.parameters.source-id }}/training/{{ inputs.parameters.variable-id }}.zarr"
                - name: regrid-method
                  value: "{{ inputs.parameters.regrid-method }}"
                - name: domain-file
                  value: "{{ inputs.parameters.domainfile1x1 }}"
                - name: correct-wetday-frequency
                  value: "{{ inputs.parameters.correct-wetday-frequency }}"
          - name: preprocess-ssps
            template: preprocess
            arguments:
              parameters:
                - name: in-zarr
                  value: "az://clean/{{ inputs.parameters.source-id }}/{{ item.experiment-id }}/{{ inputs.parameters.variable-id }}.zarr"
                - name: regrid-method
                  value: "{{ inputs.parameters.regrid-method }}"
                - name: domain-file
                  value: "{{ inputs.parameters.domainfile1x1 }}"
                - name: correct-wetday-frequency
                  value: "{{ inputs.parameters.correct-wetday-frequency }}"
            withParam: "{{ inputs.parameters.ssps }}"
          - name: biascorrect-historical
            dependencies: [ preprocess-reference, preprocess-training, preprocess-historical ]
            template: biascorrect-qdm
            arguments:
              parameters:
                - name: variable
                  value: "{{ inputs.parameters.variable-id }}"
                - name: ref-zarr
                  value: "{{ tasks.preprocess-reference.outputs.parameters.out-zarr }}"
                - name: train-zarr
                  value: "{{ tasks.preprocess-training.outputs.parameters.out-zarr }}"
                - name: simulation-zarr
                  value: "{{ tasks.preprocess-historical.outputs.parameters.out-zarr }}"
                - name: kind
                  value: "{{ inputs.parameters.qdm-kind }}"
                - name: first-year
                  value: 1950
                - name: last-year
                  value: 2014
          - name: biascorrect-ssps
            dependencies: [ preprocess-reference, preprocess-training, preprocess-ssps]
            template: biascorrect-qdm
            arguments:
              parameters:
                - name: variable
                  value: "{{ inputs.parameters.variable-id }}"
                - name: ref-zarr
                  value: "{{ tasks.preprocess-reference.outputs.parameters.out-zarr }}"
                - name: train-zarr
                  value: "{{ tasks.preprocess-training.outputs.parameters.out-zarr }}"
                - name: simulation-zarr
                  value: "{{ item.out-zarr }}"
                - name: kind
                  value: "{{ inputs.parameters.qdm-kind }}"
                - name: first-year
                  value: 2015
                - name: last-year
                  value: 2100
            withParam: "{{ tasks.preprocess-ssps.outputs.parameters }}"


    - name: preprocess
      inputs:
        parameters:
          - name: in-zarr
          - name: regrid-method
          - name: domain-file
          - name: correct-wetday-frequency  # "true" or "false" STRING!
      outputs:
        parameters:
          - name: out-zarr
            valueFrom:
              parameter: "{{ tasks.move-chunks-to-space.outputs.parameters.out-zarr }}"
      dag:
        tasks:
          - name: check-wetday-frequency
            template: wdf-check
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ inputs.parameters.in-zarr }}"
                - name: uncorrected-out-zarr
                  value: "{{ inputs.parameters.in-zarr }}"
                - name: process
                  value: "pre"
                - name: correct-bool
                  value: "{{ inputs.parameters.correct-wetday-frequency }}"
          - name: add-cyclic
            dependencies: [ check-wetday-frequency ]
            template: add-cyclic
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ tasks.check-wetday-frequency.outputs.parameters.out-zarr }}"
          - name: move-chunks-to-time
            dependencies: [ add-cyclic ]
            template: rechunk
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ tasks.add-cyclic.outputs.parameters.out-zarr }}"
                - name: time-chunk
                  value: "365"
                - name: lat-chunk
                  value: -1
                - name: lon-chunk
                  value: -1
          - name: regrid
            dependencies: [ move-chunks-to-time ]
            template: regrid
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ tasks.move-chunks-to-time.outputs.parameters.out-zarr }}"
                - name: regrid-method
                  value: "{{ inputs.parameters.regrid-method }}"
                - name: domain-file
                  value: "{{ inputs.parameters.domain-file }}"
          - name: move-chunks-to-space
            dependencies: [ regrid ]
            template: rechunk
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ tasks.regrid.outputs.parameters.out-zarr }}"
                - name: time-chunk
                  value: "-1"
                - name: lat-chunk
                  value: 10
                - name: lon-chunk
                  value: 10


    # ERA-5 does not need wet-day freq correction or wrap-around grid points...
    - name: preprocess-reference
      inputs:
        parameters:
          - name: in-zarr
          - name: regrid-method
          - name: domain-file
      outputs:
        parameters:
          - name: out-zarr
            valueFrom:
              parameter: "{{ tasks.move-chunks-to-space.outputs.parameters.out-zarr }}"
      dag:
        tasks:
          - name: move-chunks-to-time
            template: rechunk
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ inputs.parameters.in-zarr }}"
                - name: time-chunk
                  value: "365"
                - name: lat-chunk
                  value: -1
                - name: lon-chunk
                  value: -1
          - name: regrid
            dependencies: [ move-chunks-to-time ]
            template: regrid
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ tasks.move-chunks-to-time.outputs.parameters.out-zarr }}"
                - name: regrid-method
                  value: "{{ inputs.parameters.regrid-method }}"
                - name: domain-file
                  value: "{{ inputs.parameters.domain-file }}"
          - name: move-chunks-to-space
            dependencies: [ regrid ]
            template: rechunk
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ tasks.regrid.outputs.parameters.out-zarr }}"
                - name: time-chunk
                  value: "-1"
                - name: lat-chunk
                  value: 10
                - name: lon-chunk
                  value: 10


    - name: regrid
      inputs:
        parameters:
          - name: in-zarr
          - name: out-zarr
            value: "az://scratch/{{ workflow.name }}/{{ pod.name }}/out.zarr"
          - name: regrid-method
          - name: domain-file
      outputs:
        parameters:
          - name: out-zarr
            value: "{{ inputs.parameters.out-zarr }}"
      container:
        image: downscalecmip6.azurecr.io/dodola:0.5.0
        env:
          - name: AZURE_STORAGE_ACCOUNT_NAME
            valueFrom:
              secretKeyRef:
                name: workerstoragecreds-secret
                key: azurestorageaccount
          - name: AZURE_STORAGE_ACCOUNT_KEY
            valueFrom:
              secretKeyRef:
                name: workerstoragecreds-secret
                key: azurestoragekey
        command: [ "dodola" ]
        args:
          - "regrid"
          - "{{ inputs.parameters.in-zarr }}"
          - "--astype=float32"
          - "--out"
          - "{{ inputs.parameters.out-zarr }}"
          - "--method"
          - "{{ inputs.parameters.regrid-method }}"
          - "--domain-file"
          - "{{ inputs.parameters.domain-file }}"
        resources:
          requests:
            memory: 48Gi
            cpu: "1000m"
          limits:
            memory: 48Gi
            cpu: "2000m"
      activeDeadlineSeconds: 3600
      retryStrategy:
        limit: 2
        retryPolicy: "Always"


    - name: rechunk
      inputs:
        parameters:
          - name: in-zarr
          - name: out-zarr
            value: "az://scratch/{{ workflow.name }}/{{ pod.name }}/out.zarr"
          - name: time-chunk
            value: 365
          - name: lat-chunk
            value: 10
          - name: lon-chunk
            value: 10
          - name: time-dim-name
            value: time
      outputs:
        parameters:
          - name: out-zarr
            value: "{{ inputs.parameters.out-zarr }}"
      container:
        image: downscalecmip6.azurecr.io/dodola:0.5.0
        env:
          - name: AZURE_STORAGE_ACCOUNT_NAME
            valueFrom:
              secretKeyRef:
                name: workerstoragecreds-secret
                key: azurestorageaccount
          - name: AZURE_STORAGE_ACCOUNT_KEY
            valueFrom:
              secretKeyRef:
                name: workerstoragecreds-secret
                key: azurestoragekey
        command: [ dodola ]
        args:
          - "rechunk"
          - "{{ inputs.parameters.in-zarr }}"
          - "--out"
          - "{{ inputs.parameters.out-zarr }}"
          - "--chunk"
          - "{{ inputs.parameters.time-dim-name }}={{ inputs.parameters.time-chunk }}"
          - "--chunk"
          - "lat={{ inputs.parameters.lat-chunk }}"
          - "--chunk"
          - "lon={{ inputs.parameters.lon-chunk }}"
        resources:
          requests:
            memory: 32Gi
            cpu: "1000m"
          limits:
            memory: 32Gi
            cpu: "2000m"
      activeDeadlineSeconds: 1800
      retryStrategy:
        limit: 1
        retryPolicy: "Always"


    - name: biascorrect-qdm
      inputs:
        parameters:
          - name: variable
          - name: ref-zarr
          - name: train-zarr
          - name: simulation-zarr
          - name: kind
          - name: first-year
          - name: last-year
          - name: include-quantiles
            value: "true"
      outputs:
        parameters:
          - name: out-zarr
            valueFrom:
              parameter: "{{ tasks.prime-output-zarrstore.outputs.parameters.out-zarr }}"
      dag:
        tasks:
          - name: prime-output-zarrstore
            template: prime-output-zarrstore
            arguments:
              parameters:
                - name: variable
                  value: "{{ inputs.parameters.variable }}"
                - name: simulation-zarr
                  value: "{{ inputs.parameters.simulation-zarr }}"
                - name: first-year
                  value: "{{ inputs.parameters.first-year }}"
                - name: last-year
                  value: "{{ inputs.parameters.last-year }}"
                - name: include-quantiles
                  value: "{{ inputs.parameters.include-quantiles }}"
          - name: with-lat-chunk
            depends: "prime-output-zarrstore"
            template: with-lat-chunk
            arguments:
              parameters:
                - name: variable
                  value: "{{ inputs.parameters.variable }}"
                - name: ref-zarr
                  value: "{{ inputs.parameters.ref-zarr }}"
                - name: train-zarr
                  value: "{{ inputs.parameters.train-zarr }}"
                - name: simulation-zarr
                  value: "{{ inputs.parameters.simulation-zarr }}"
                - name: first-year
                  value: "{{ inputs.parameters.first-year }}"
                - name: last-year
                  value: "{{ inputs.parameters.last-year }}"
                - name: kind
                  value: "{{ inputs.parameters.kind }}"
                - name: lat-slice-min
                  value: "{{=asInt(item) * 10 }}"
                - name: lat-slice-max
                  value: "{{=asInt(item) * 10 + 10 }}"
                - name: out-zarr
                  value: "{{ tasks.prime-output-zarrstore.outputs.parameters.out-zarr }}"
                - name: include-quantiles
                  value: "{{ inputs.parameters.include-quantiles }}"
            withSequence:
              start: "0"
              end: "17"


    - name: prime-output-zarrstore
      inputs:
        parameters:
          - name: variable
          - name: simulation-zarr
          - name: first-year
          - name: last-year
          - name: out-zarr
            value: "az://scratch/{{ workflow.name }}/{{ pod.name }}/qdm_adjusted.zarr"
          - name: include-quantiles
            value: "false"
      outputs:
        parameters:
          - name: out-zarr
            value: "{{ inputs.parameters.out-zarr }}"
      script:
        image: downscalecmip6.azurecr.io/dodola:0.5.0
        env:
          - name: AZURE_STORAGE_ACCOUNT_NAME
            valueFrom:
              secretKeyRef:
                name: workerstoragecreds-secret
                key: azurestorageaccount
          - name: AZURE_STORAGE_ACCOUNT_KEY
            valueFrom:
              secretKeyRef:
                name: workerstoragecreds-secret
                key: azurestoragekey
        command: [ python ]
        source: |
          import dodola.repository
          import xarray as xr

          nonlat_variables = ["lon", "time"]

          simulation_zarr = "{{ inputs.parameters.simulation-zarr }}"
          out_zarr = "{{ inputs.parameters.out-zarr }}"
          first_year = int({{ inputs.parameters.first-year }})
          last_year = int({{ inputs.parameters.last-year }})
          variable = "{{ inputs.parameters.variable }}"
          include_quantiles = "{{ inputs.parameters.include-quantiles }}".lower() == "true"
          print(f"{include_quantiles=}")  # DEBUG

          timeslice = slice(str(first_year), str(last_year + 1))

          primed_out = dodola.repository.read(simulation_zarr).sel(time=timeslice).chunk({"time": -1, "lat": 10, "lon":-1})
          if include_quantiles:
              quantiles_variable = "sim_q"
              primed_out[quantiles_variable] = xr.zeros_like(primed_out[variable])
              primed_out = primed_out.set_coords(quantiles_variable)
          print(primed_out)  # DEBUG

          primed_out.to_zarr(
            out_zarr,
            mode="w",
            compute=False,
            consolidated=True,
          )
          print(f"Output written to {out_zarr}")  # DEBUG

          # Append variables that do not depend on "lat"
          if nonlat_variables:
              primed_out[nonlat_variables].to_zarr(
                  out_zarr,
                  mode="a",
                  compute=True,
                  consolidated=True
              )
        resources:
          requests:
            memory: 4Gi
            cpu: "1000m"
          limits:
            memory: 4Gi
            cpu: "1000m"
      activeDeadlineSeconds: 900
      retryStrategy:
        limit: 4
        retryPolicy: "Always"


    - name: with-lat-chunk
      inputs:
        parameters:
          - name: variable
          - name: ref-zarr
          - name: train-zarr
          - name: simulation-zarr
          - name: out-zarr
          - name: kind
          - name: lat-slice-min
          - name: lat-slice-max
          - name: first-year
          - name: last-year
          - name: include-quantiles
            value: "false"
      outputs:
        parameters:
          - name: out-zarr
            valueFrom:
              parameter: "{{ tasks.apply-qdm.outputs.parameters.out-zarr }}"
      dag:
        tasks:
          - name: train-qdm
            template: train-qdm
            arguments:
              parameters:
                - name: variable
                  value: "{{ inputs.parameters.variable }}"
                - name: ref-zarr
                  value: "{{ inputs.parameters.ref-zarr }}"
                - name: train-zarr
                  value: "{{ inputs.parameters.train-zarr }}"
                - name: kind
                  value: "{{ inputs.parameters.kind }}"
                - name: lat-slice-min
                  value: "{{ inputs.parameters.lat-slice-min }}"
                - name: lat-slice-max
                  value: "{{ inputs.parameters.lat-slice-max }}"
          - name: apply-qdm
            depends: "train-qdm"
            template: apply-qdm
            arguments:
              parameters:
                - name: variable
                  value: "{{ inputs.parameters.variable }}"
                - name: qdm-zarr
                  value: "{{ tasks.train-qdm.outputs.parameters.out-zarr }}"
                - name: simulation-zarr
                  value: "{{ inputs.parameters.simulation-zarr }}"
                - name: first-year
                  value: "{{ inputs.parameters.first-year }}"
                - name: last-year
                  value: "{{ inputs.parameters.last-year }}"
                - name: lat-slice-min
                  value: "{{ inputs.parameters.lat-slice-min }}"
                - name: lat-slice-max
                  value: "{{ inputs.parameters.lat-slice-max }}"
                - name: out-zarr
                  value: "{{ inputs.parameters.out-zarr }}"
                - name: include-quantiles
                  value: "{{ inputs.parameters.include-quantiles }}"


    - name: train-qdm
      inputs:
        parameters:
          - name: variable
          - name: ref-zarr
          - name: train-zarr
          - name: kind
          - name: lat-slice-min
          - name: lat-slice-max
          - name: out-zarr
            value: "az://scratch/{{ workflow.name }}/{{ pod.name }}/qdm_model.zarr"
      outputs:
        parameters:
          - name: out-zarr
            value: "{{ inputs.parameters.out-zarr }}"
      script:
        image: downscalecmip6.azurecr.io/dodola:0.5.0
        env:
          - name: AZURE_STORAGE_ACCOUNT_NAME
            valueFrom:
              secretKeyRef:
                name: workerstoragecreds-secret
                key: azurestorageaccount
          - name: AZURE_STORAGE_ACCOUNT_KEY
            valueFrom:
              secretKeyRef:
                name: workerstoragecreds-secret
                key: azurestoragekey
        command: [ python ]
        source: |
          import os
          import dodola.repository
          from dodola.core import train_quantiledeltamapping

          kind_map = {"multiplicative": "*", "additive": "+"}

          ref_zarr = "{{ inputs.parameters.ref-zarr }}"
          train_zarr = "{{ inputs.parameters.train-zarr }}"
          out_zarr = "{{ inputs.parameters.out-zarr }}"
          min_slice = int({{ inputs.parameters.lat-slice-min }})
          max_slice = int({{ inputs.parameters.lat-slice-max }})
          variable = "{{ inputs.parameters.variable }}"
          kind = kind_map["{{ inputs.parameters.kind }}"]

          latslice = slice(min_slice, max_slice)

          print(f"reading {ref_zarr}")
          reference = dodola.repository.read(ref_zarr).isel(lat=latslice)
          print(f"reading {train_zarr}")
          training = dodola.repository.read(train_zarr).isel(lat=latslice)

          reference.load()
          training.load()

          qdm = train_quantiledeltamapping(
              reference=reference,
              historical=training,
              variable=variable,
              kind=kind,
          )

          dodola.repository.write(out_zarr, qdm.ds)
          print(f"Output written to {out_zarr}")  # DEBUG
        resources:
          requests:
            memory: 8Gi
            cpu: "1000m"
          limits:
            memory: 8Gi
            cpu: "2000m"
      activeDeadlineSeconds: 900
      retryStrategy:
        limit: 1
        retryPolicy: "Always"


    - name: apply-qdm
      inputs:
        parameters:
          - name: variable
          - name: qdm-zarr
          - name: simulation-zarr
          - name: first-year
          - name: last-year
          - name: lat-slice-min
          - name: lat-slice-max
          - name: include-quantiles
            value: "false"
          - name: out-zarr
            value: "az://scratch/{{ workflow.name }}/{{ pod.name }}/qdm_adjusted.zarr"
      outputs:
        parameters:
          - name: out-zarr
            value: "{{ inputs.parameters.out-zarr }}"
      script:
        image: downscalecmip6.azurecr.io/dodola:0.5.0
        env:
          - name: AZURE_STORAGE_ACCOUNT_NAME
            valueFrom:
              secretKeyRef:
                name: workerstoragecreds-secret
                key: azurestorageaccount
          - name: AZURE_STORAGE_ACCOUNT_KEY
            valueFrom:
              secretKeyRef:
                name: workerstoragecreds-secret
                key: azurestoragekey
        command: [ python ]
        source: |
          import dask.delayed
          import dodola.repository
          from dodola.core import adjust_quantiledeltamapping_year
          import xarray as xr

          nonlat_variables = ["lon", "time"]

          qdm_zarr = "{{ inputs.parameters.qdm-zarr }}"
          simulation_zarr = "{{ inputs.parameters.simulation-zarr }}"
          out_zarr = "{{ inputs.parameters.out-zarr }}"
          min_slice = int({{ inputs.parameters.lat-slice-min }})
          max_slice = int({{ inputs.parameters.lat-slice-max }})
          first_year = int({{ inputs.parameters.first-year }})
          last_year = int({{ inputs.parameters.last-year }})
          variable = "{{ inputs.parameters.variable }}"
          include_quantiles = "{{ inputs.parameters.include-quantiles }}".lower() == "true"
          print(f"{include_quantiles=}")  # DEBUG

          latslice = slice(min_slice, max_slice)

          print(f"slicing({min_slice}, {max_slice})")  # DEBUG

          qdm = dodola.repository.read(qdm_zarr)
          simulation = dodola.repository.read(simulation_zarr).isel(lat=latslice)

          qdm.load()
          simulation.load()

          # TODO: Return this to dask.delayeds instead of raw for loops.
          qdm_list = []
          for year in range(first_year, last_year + 1):
              adj = adjust_quantiledeltamapping_year(
                  simulation=simulation,
                  qdm=qdm,
                  year=year,
                  variable=variable,
                  include_quantiles=include_quantiles
              )
              qdm_list.append(adj.astype("float32"))

          out_all_years = xr.concat(qdm_list, dim="time")
          #out_all_years = out_all_years.compute()

          if nonlat_variables:
              out_all_years = out_all_years.drop_vars(nonlat_variables)

          out_all_years = out_all_years.transpose("time", "lat", "lon")
          print(f"{out_all_years=}")  # DEBUG

          # Output to region of existing zarr store.
          out_all_years.to_zarr(out_zarr, region={"lat": latslice}, mode="a")
          print(f"Output written to {out_zarr}")  # DEBUG
        resources:
          requests:
            memory: 32Gi
            cpu: "1000m"
          limits:
            memory: 32Gi
            cpu: "8000m"
      activeDeadlineSeconds: 900
      retryStrategy:
        limit: 3
        retryPolicy: "Always"


    # Easier way to do conditional wet day frequency in Argo 3.1. This evaluates whether we do wet day frequency
    # correction or not and outputs the location of the corrected or uncorrected file if appropriate.
    # It's pretty clunky. Sorry. There has to be a better way to do this.
    - name: wdf-check
      inputs:
        parameters:
          - name: in-zarr
          - name: process  # "pre" or "post"
          - name: correct-bool  # Do the correction? true or false
      steps:
        - - name: correct-wetday-frequency
            template: correct-wetday-frequency
            when: "{{ inputs.parameters.correct-bool }} == true"
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ inputs.parameters.in-zarr }}"
                - name: process  # pre or post
                  value: "{{ inputs.parameters.process }}"
      outputs:
        parameters:
          - name: out-zarr
            valueFrom:
              expression: "inputs.parameters['correct-bool'] == true ? steps.correct-wetday-frequency.outputs.parameters['out-zarr'] : inputs.parameters['in-zarr']"


    - name: correct-wetday-frequency
      inputs:
        parameters:
          - name: in-zarr
          - name: out-zarr
            value: "az://scratch/{{ workflow.name }}/{{ pod.name }}/out.zarr"
          - name: process  # pre or post
      outputs:
        parameters:
          - name: out-zarr
            value: "{{ inputs.parameters.out-zarr }}"
      container:
        image: downscalecmip6.azurecr.io/dodola:0.5.0
        env:
          - name: AZURE_STORAGE_ACCOUNT_NAME
            valueFrom:
              secretKeyRef:
                name: workerstoragecreds-secret
                key: azurestorageaccount
          - name: AZURE_STORAGE_ACCOUNT_KEY
            valueFrom:
              secretKeyRef:
                name: workerstoragecreds-secret
                key: azurestoragekey
        command: [ dodola ]
        args:
          - "correct-wetday-frequency"
          - "{{ inputs.parameters.in-zarr }}"
          - "--out"
          - "{{ inputs.parameters.out-zarr }}"
          - "--process"
          - "{{ inputs.parameters.process }}"
        resources:
          requests:
            memory: 8Gi
            cpu: "1000m"
          limits:
            memory: 8Gi
            cpu: "2000m"
      activeDeadlineSeconds: 600
      retryStrategy:
        limit: 3
        retryPolicy: "Always"


    - name: add-cyclic
      inputs:
        parameters:
          - name: in-zarr
          - name: out-zarr
            value: "az://scratch/{{ workflow.name }}/{{ pod.name }}/out.zarr"
      outputs:
        parameters:
          - name: out-zarr
            value: "{{ inputs.parameters.out-zarr }}"
      script:
        image: downscalecmip6.azurecr.io/dodola:0.5.0
        env:
          - name: IN
            value: "{{ inputs.parameters.in-zarr }}"
          - name: OUT
            value: "{{ inputs.parameters.out-zarr }}"
          - name: AZURE_STORAGE_ACCOUNT_NAME
            valueFrom:
              secretKeyRef:
                name: workerstoragecreds-secret
                key: azurestorageaccount
          - name: AZURE_STORAGE_ACCOUNT_KEY
            valueFrom:
              secretKeyRef:
                name: workerstoragecreds-secret
                key: azurestoragekey
        command: [ python ]
        source: |
          import os
          import dodola.repository as storage
          from dodola.core import _add_cyclic

          ds = storage.read(os.environ.get("IN"))
          ds = _add_cyclic(ds, dim="lon")
          storage.write(os.environ.get("OUT"), ds)
        resources:
          requests:
            memory: 32Gi
            cpu: "1000m"
          limits:
            memory: 32Gi
            cpu: "4000m"
      activeDeadlineSeconds: 480
      retryStrategy:
        limit: 4
        retryPolicy: "Always"
