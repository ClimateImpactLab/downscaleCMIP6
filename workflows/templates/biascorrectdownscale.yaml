apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: biascorrectdownscale
  labels:
    component: biascorrectdownscale
spec:
  workflowMetadata:
    labels:
      component: biascorrectdownscale
  entrypoint: with-jobs
  arguments:
    parameters:
      - name: jobs
        value: |
          [
            {
              "target": "ssp",
              "variable_id": "tasmax",
              "historical": {
                "activity_id": "CMIP",
                "experiment_id": "historical",
                "table_id": "day",
                "variable_id": "tasmax",
                "source_id": "GFDL-ESM4",
                "institution_id": "NOAA-GFDL",
                "member_id": "r1i1p1f1",
                "grid_label": "gr1",
                "version": "20190726"
              },
              "ssp": {
                "activity_id": "ScenarioMIP",
                "experiment_id": "ssp370",
                "table_id": "day",
                "variable_id": "tasmax",
                "source_id": "GFDL-ESM4",
                "institution_id": "NOAA-GFDL",
                "member_id": "r1i1p1f1",
                "grid_label": "gr1",
                "version": "20180701"
              }
            }
          ]
      - name: regrid-method
        value: "bilinear"
      - name: correct-wetday-frequency  # "true" or "false" STRING!
        value: "false"
      - name: qdm-kind #additive or multiplicative
        value: "additive"
  templates:


      # Loop through each job listed.
    - name: with-jobs
      inputs:
        parameters:
          - name: jobs
      steps:
        - - name: parameterize
            template: parameterize
            arguments:
              parameters:
                - name: target
                  value: "{{ item.target }}"
                - name: historical
                  value: "{{ item.historical }}"
                - name: ssp
                  value: "{{ item.ssp }}"
            withParam: "{{ inputs.parameters.jobs }}"


      # Start work for target simulation, with target-specific configs.
    - name: parameterize
      inputs:
        parameters:
          - name: target
          - name: ssp
          - name: historical
          - name: regrid-method
            value: "{{ workflow.parameters.regrid-method }}"
          - name: qdm-kind
            value: "{{ workflow.parameters.qdm-kind }}"
          - name: correct-wetday-frequency
            value: "{{ workflow.parameters.correct-wetday-frequency }}"
          - name: domainfile1x1
            value: "gs://support-c23ff1a3/domain.1x1.zarr"
          - name: domainfile0p25x0p25
            value: "gs://support-c23ff1a3/domain.0p25x0p25.zarr"
      steps:
        - - name: historical
            template: biascorrectdownscale
            arguments:
              parameters:
                - name: simulation
                  value: "{{ inputs.parameters.historical }}"
                - name: historical
                  value: "{{ inputs.parameters.historical }}"
                - name: regrid-method
                  value: "{{ inputs.parameters.regrid-method }}"
                - name: qdm-kind
                  value: "{{ inputs.parameters.qdm-kind }}"
                - name: correct-wetday-frequency
                  value: "{{ inputs.parameters.correct-wetday-frequency }}"
                - name: first-year
                  value: 1950
                - name: last-year
                  value: 2014
                - name: domainfile1x1
                  value: "{{ inputs.parameters.domainfile1x1 }}"
                - name: domainfile0p25x0p25
                  value: "gs://support-c23ff1a3/domain.0p25x0p25.zarr"
            when: "{{inputs.parameters.target}} == historical"
          - name: ssp
            template: biascorrectdownscale
            arguments:
              parameters:
                - name: simulation
                  value: "{{ inputs.parameters.ssp }}"
                - name: historical
                  value: "{{ inputs.parameters.historical }}"
                - name: regrid-method
                  value: "{{ inputs.parameters.regrid-method }}"
                - name: qdm-kind
                  value: "{{ inputs.parameters.qdm-kind }}"
                - name: correct-wetday-frequency
                  value: "{{ inputs.parameters.correct-wetday-frequency }}"
                - name: first-year
                  value: 2015
                - name: last-year
                  value: 2100
                - name: domainfile1x1
                  value: "{{ inputs.parameters.domainfile1x1 }}"
                - name: domainfile0p25x0p25
                  value: "gs://support-c23ff1a3/domain.0p25x0p25.zarr"
            when: "{{inputs.parameters.target}} == ssp"


    - name: biascorrectdownscale
      inputs:
        parameters:
          - name: simulation
          - name: historical
          - name: regrid-method
          - name: qdm-kind
          - name: correct-wetday-frequency
          - name: first-year
          - name: last-year
          - name: domainfile1x1
          - name: domainfile0p25x0p25
          - name: reference-zarr
            # Use simulation variable_id to get reference URL.
            value: >-
              gs://clean-b1dbca25/reanalysis/ERA-5/F320/{{=jsonpath(inputs.parameters.simulation, '$.variable_id')}}.1995-2015.F320.zarr
      dag:
        tasks:
          - name: get-input-clean-training-url
            templateRef:
              name: catalog
              template: get-fsspec-url-from-parameters
            arguments:
              parameters:
                - name: experiment-id
                  value: "training"
                - name: activity-id
                  value: "{{=jsonpath(inputs.parameters.historical, '$.activity_id')}}"
                - name: table-id
                  value: "{{=jsonpath(inputs.parameters.historical, '$.table_id')}}"
                - name: variable-id
                  value: "{{=jsonpath(inputs.parameters.historical, '$.variable_id')}}"
                - name: source-id
                  value: "{{=jsonpath(inputs.parameters.historical, '$.source_id')}}"
                - name: institution-id
                  value: "{{=jsonpath(inputs.parameters.historical, '$.institution_id')}}"
                - name: member-id
                  value: "{{=jsonpath(inputs.parameters.historical, '$.member_id')}}"
                - name: grid-label
                  value: "{{=jsonpath(inputs.parameters.historical, '$.grid_label')}}"
                - name: version
                  value: "{{=jsonpath(inputs.parameters.historical, '$.version')}}"
                - name: base-url
                  value: "gs://clean-b1dbca25/cmip6"
          - name: get-input-clean-simulation-url
            templateRef:
              name: catalog
              template: get-fsspec-url-from-parameters
            arguments:
              parameters:
                - name: experiment-id
                  value: "{{=jsonpath(inputs.parameters.simulation, '$.experiment_id')}}"
                - name: activity-id
                  value: "{{=jsonpath(inputs.parameters.simulation, '$.activity_id')}}"
                - name: table-id
                  value: "{{=jsonpath(inputs.parameters.simulation, '$.table_id')}}"
                - name: variable-id
                  value: "{{=jsonpath(inputs.parameters.simulation, '$.variable_id')}}"
                - name: source-id
                  value: "{{=jsonpath(inputs.parameters.simulation, '$.source_id')}}"
                - name: institution-id
                  value: "{{=jsonpath(inputs.parameters.simulation, '$.institution_id')}}"
                - name: member-id
                  value: "{{=jsonpath(inputs.parameters.simulation, '$.member_id')}}"
                - name: grid-label
                  value: "{{=jsonpath(inputs.parameters.simulation, '$.grid_label')}}"
                - name: version
                  value: "{{=jsonpath(inputs.parameters.simulation, '$.version')}}"
                - name: base-url
                  value: "gs://clean-b1dbca25/cmip6"
          - name: get-output-biascorrected-url
            templateRef:
              name: catalog
              template: get-fsspec-url-from-parameters
            arguments:
              parameters:
                - name: experiment-id
                  value: "{{=jsonpath(inputs.parameters.simulation, '$.experiment_id')}}"
                - name: activity-id
                  value: "{{=jsonpath(inputs.parameters.simulation, '$.activity_id')}}"
                - name: table-id
                  value: "{{=jsonpath(inputs.parameters.simulation, '$.table_id')}}"
                - name: variable-id
                  value: "{{=jsonpath(inputs.parameters.simulation, '$.variable_id')}}"
                - name: source-id
                  value: "{{=jsonpath(inputs.parameters.simulation, '$.source_id')}}"
                - name: institution-id
                  value: "{{=jsonpath(inputs.parameters.simulation, '$.institution_id')}}"
                - name: member-id
                  value: "{{=jsonpath(inputs.parameters.simulation, '$.member_id')}}"
                - name: grid-label
                  value: "{{=jsonpath(inputs.parameters.simulation, '$.grid_label')}}"
                - name: version
                  value: "{{workflow.creationTimestamp.Y}}{{workflow.creationTimestamp.m}}{{workflow.creationTimestamp.d}}{{workflow.creationTimestamp.H}}{{workflow.creationTimestamp.M}}{{workflow.creationTimestamp.S}}"
                - name: base-url
                  value: "gs://biascorrected-492e989a/stage"
          - name: get-output-downscaled-url
            templateRef:
              name: catalog
              template: get-fsspec-url-from-parameters
            arguments:
              parameters:
                - name: experiment-id
                  value: "{{=jsonpath(inputs.parameters.simulation, '$.experiment_id')}}"
                - name: activity-id
                  value: "{{=jsonpath(inputs.parameters.simulation, '$.activity_id')}}"
                - name: table-id
                  value: "{{=jsonpath(inputs.parameters.simulation, '$.table_id')}}"
                - name: variable-id
                  value: "{{=jsonpath(inputs.parameters.simulation, '$.variable_id')}}"
                - name: source-id
                  value: "{{=jsonpath(inputs.parameters.simulation, '$.source_id')}}"
                - name: institution-id
                  value: "{{=jsonpath(inputs.parameters.simulation, '$.institution_id')}}"
                - name: member-id
                  value: "{{=jsonpath(inputs.parameters.simulation, '$.member_id')}}"
                - name: grid-label
                  value: "{{=jsonpath(inputs.parameters.simulation, '$.grid_label')}}"
                - name: version
                  value: "{{workflow.creationTimestamp.Y}}{{workflow.creationTimestamp.m}}{{workflow.creationTimestamp.d}}{{workflow.creationTimestamp.H}}{{workflow.creationTimestamp.M}}{{workflow.creationTimestamp.S}}"
                - name: base-url
                  value: "gs://downscaled-288ec5ac/stage"
          - name: preprocess-reference
            template: preprocess-reference
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ inputs.parameters.reference-zarr }}"
                - name: regrid-method
                  value: "{{ inputs.parameters.regrid-method }}"
                - name: domain-file
                  value: "{{ inputs.parameters.domainfile1x1 }}"
          - name: create-fine-reference
            template: create-fine-reference
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ inputs.parameters.reference-zarr }}"
                - name: regrid-method
                  value: "{{ inputs.parameters.regrid-method }}"
                - name: domain-file
                  value: "{{ inputs.parameters.domainfile0p25x0p25 }}"
          - name: create-coarse-reference
            template: create-coarse-reference
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ inputs.parameters.reference-zarr }}"
                - name: regrid-method
                  value: "{{ inputs.parameters.regrid-method }}"
                - name: domainfile0p25x0p25
                  value: "{{ inputs.parameters.domainfile0p25x0p25 }}"
                - name: domainfile1x1
                  value: "{{ inputs.parameters.domainfile1x1 }}"
          - name: preprocess-training
            template: preprocess-gcm
            depends: get-input-clean-training-url
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ tasks.get-input-clean-training-url.outputs.parameters.out-url }}"
                - name: regrid-method
                  value: "{{ inputs.parameters.regrid-method }}"
                - name: domain-file
                  value: "{{ inputs.parameters.domainfile1x1 }}"
                - name: correct-wetday-frequency
                  value: "{{ inputs.parameters.correct-wetday-frequency }}"
          - name: preprocess-simulation
            template: preprocess-gcm
            depends: get-input-clean-simulation-url
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ tasks.get-input-clean-simulation-url.outputs.parameters.out-url }}"
                - name: regrid-method
                  value: "{{ inputs.parameters.regrid-method }}"
                - name: domain-file
                  value: "{{ inputs.parameters.domainfile1x1 }}"
                - name: correct-wetday-frequency
                  value: "{{ inputs.parameters.correct-wetday-frequency }}"
          - name: qdm
            depends: >-
              preprocess-reference
              && preprocess-training
              && preprocess-simulation
              && get-output-biascorrected-url
            template: qdm
            arguments:
              parameters:
                - name: variable
                  value: "{{=jsonpath(inputs.parameters.simulation, '$.variable_id')}}"
                - name: ref-zarr
                  value: "{{ tasks.preprocess-reference.outputs.parameters.out-zarr }}"
                - name: train-zarr
                  value: "{{ tasks.preprocess-training.outputs.parameters.out-zarr }}"
                - name: simulation-zarr
                  value: "{{ tasks.preprocess-simulation.outputs.parameters.out-zarr }}"
                - name: out-zarr
                  value: "{{ tasks.get-output-biascorrected-url.outputs.parameters.out-url }}"
                - name: kind
                  value: "{{ inputs.parameters.qdm-kind }}"
                - name: first-year
                  value: "{{ inputs.parameters.first-year }}"
                - name: last-year
                  value: "{{ inputs.parameters.last-year }}"
          - name: preprocess-biascorrected
            template: preprocess-biascorrected
            depends: qdm
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ tasks.qdm.outputs.parameters.out-zarr }}"
                - name: domain-file
                  value: "{{ inputs.parameters.domainfile0p25x0p25 }}"
          - name: prime-aiqpd-biascorrected-output-zarr
            template: prime-aiqpd-biascorrected-output-zarr
            depends: "preprocess-biascorrected && get-output-downscaled-url"
            arguments:
              parameters:
                - name: simulation-zarr
                  value: "{{ tasks.preprocess-biascorrected.outputs.parameters.out-zarr }}"
                - name: variable
                  value: "{{=jsonpath(inputs.parameters.simulation, '$.variable_id')}}"
                - name: out-zarr
                  value: "{{ tasks.get-output-downscaled-url.outputs.parameters.out-url }}"
          - name: aiqpd
            template: aiqpd
            depends: >-
              preprocess-biascorrected
              && prime-aiqpd-biascorrected-output-zarr
              && create-coarse-reference
              && create-fine-reference
            arguments:
              parameters:
                - name: variable-id
                  value: "{{=jsonpath(inputs.parameters.simulation, '$.variable_id')}}"
                - name: simulation-zarr
                  value: "{{ tasks.preprocess-biascorrected.outputs.parameters.out-zarr }}"
                - name: coarse-reference-zarr
                  value: "{{ tasks.create-coarse-reference.outputs.parameters.out-zarr }}"
                - name: fine-reference-zarr
                  value: "{{ tasks.create-fine-reference.outputs.parameters.out-zarr }}"
                - name: qdm-kind
                  value: "{{ inputs.parameters.qdm-kind }}"
                - name: out-zarr
                  value: "{{ tasks.prime-aiqpd-biascorrected-output-zarr.outputs.parameters.out-zarr }}"
                  # Looping over 2 degree latitude bands...
                - name: lat-slice-min
                  value: "{{=asInt(item) * 2 }}"
                - name: lat-slice-max
                  value: "{{=asInt(item) * 2 + 2 }}"
            # Also, looping over 2 pixel chunk latitude bands:
            withSequence:
              start: "0"
              end: "359"


      # Regridding and rechunking required for GCM simulations before bias correction.
    - name: preprocess-gcm
      inputs:
        parameters:
          - name: in-zarr
          - name: regrid-method
          - name: domain-file
          - name: correct-wetday-frequency  # "true" or "false" STRING!
      outputs:
        parameters:
          - name: out-zarr
            valueFrom:
              parameter: "{{ steps.move-chunks-to-space.outputs.parameters.out-zarr }}"
      steps:
        - - name: check-wetday-frequency
            template: wdf-check
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ inputs.parameters.in-zarr }}"
                - name: uncorrected-out-zarr
                  value: "{{ inputs.parameters.in-zarr }}"
                - name: process
                  value: "pre"
                - name: correct-bool
                  value: "{{ inputs.parameters.correct-wetday-frequency }}"
        - - name: add-cyclic
            template: add-cyclic
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ steps.check-wetday-frequency.outputs.parameters.out-zarr }}"
        - - name: move-chunks-to-time
            templateRef:
              name: rechunk
              template: rechunk
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ steps.add-cyclic.outputs.parameters.out-zarr }}"
                - name: time-chunk
                  value: "365"
                - name: lat-chunk
                  value: -1
                - name: lon-chunk
                  value: -1
        - - name: regrid
            templateRef:
              name: regrid
              template: regrid
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ steps.move-chunks-to-time.outputs.parameters.out-zarr }}"
                - name: regrid-method
                  value: "{{ inputs.parameters.regrid-method }}"
                - name: domain-file
                  value: "{{ inputs.parameters.domain-file }}"
        - - name: move-chunks-to-space
            templateRef:
              name: rechunk
              template: rechunk
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ steps.regrid.outputs.parameters.out-zarr }}"
                - name: time-chunk
                  value: "-1"
                - name: lat-chunk
                  value: 10
                - name: lon-chunk
                  value: 10


    # ERA-5 does not need wet-day freq correction or wrap-around grid points...
    - name: preprocess-reference
      inputs:
        parameters:
          - name: in-zarr
          - name: regrid-method
          - name: domain-file
      outputs:
        parameters:
          - name: out-zarr
            valueFrom:
              parameter: "{{ tasks.move-chunks-to-space.outputs.parameters.out-zarr }}"
      dag:
        tasks:
          - name: move-chunks-to-time
            templateRef:
              name: rechunk
              template: rechunk
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ inputs.parameters.in-zarr }}"
                - name: time-chunk
                  value: "365"
                - name: lat-chunk
                  value: -1
                - name: lon-chunk
                  value: -1
          - name: regrid
            dependencies: [ move-chunks-to-time ]
            templateRef:
              name: regrid
              template: regrid
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ tasks.move-chunks-to-time.outputs.parameters.out-zarr }}"
                - name: regrid-method
                  value: "{{ inputs.parameters.regrid-method }}"
                - name: domain-file
                  value: "{{ inputs.parameters.domain-file }}"
          - name: move-chunks-to-space
            dependencies: [ regrid ]
            templateRef:
              name: rechunk
              template: rechunk
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ tasks.regrid.outputs.parameters.out-zarr }}"
                - name: time-chunk
                  value: "-1"
                - name: lat-chunk
                  value: 10
                - name: lon-chunk
                  value: 10


    - name: create-fine-reference
      inputs:
        parameters:
          - name: in-zarr
          - name: regrid-method
          - name: domain-file
      outputs:
        parameters:
          - name: out-zarr
            valueFrom:
              parameter: "{{ steps.move-chunks-to-space.outputs.parameters.out-zarr }}"
      steps:
        - - name: move-chunks-to-time
            templateRef:
              name: rechunk
              template: rechunk
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ inputs.parameters.in-zarr }}"
                - name: time-chunk
                  value: "73"
                - name: lat-chunk
                  value: -1
                - name: lon-chunk
                  value: -1
        - - name: regrid
            templateRef:
              name: distributed-regrid
              template: main
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ steps.move-chunks-to-time.outputs.parameters.out-zarr }}"
                - name: regrid-method
                  value: "{{ inputs.parameters.regrid-method }}"
                - name: domain-file
                  value: "{{ inputs.parameters.domain-file }}"
                - name: add-cyclic-lon
                  value: "true"
                - name: add-lat-buffer
                  value: "true"
        - - name: move-chunks-to-space
            templateRef:
              name: rechunk
              template: rechunk
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ steps.regrid.outputs.parameters.out-zarr }}"
                - name: time-chunk
                  value: 365
                - name: lat-chunk
                  value: 2
                - name: lon-chunk
                  value: -1


    - name: create-coarse-reference
      inputs:
        parameters:
          - name: in-zarr
          - name: regrid-method
          - name: domainfile0p25x0p25
          - name: domainfile1x1
      outputs:
        parameters:
          - name: out-zarr
            valueFrom:
              parameter: "{{ steps.move-chunks-to-space.outputs.parameters.out-zarr }}"
      steps:
        - - name: coarse-regrid
            templateRef:
              name: regrid
              template: regrid
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ inputs.parameters.in-zarr }}"
                - name: regrid-method
                  value: "{{ inputs.parameters.regrid-method }}"
                - name: domain-file
                  value: "{{ inputs.parameters.domainfile1x1 }}"
        - - name: move-chunks-to-time
            templateRef:
              name: rechunk
              template: rechunk
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ steps.coarse-regrid.outputs.parameters.out-zarr }}"
                - name: time-chunk
                  value: "73"
                - name: lat-chunk
                  value: -1
                - name: lon-chunk
                  value: -1
        - - name: fine-regrid
            templateRef:
              name: distributed-regrid
              template: main
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ steps.move-chunks-to-time.outputs.parameters.out-zarr }}"
                - name: regrid-method
                  value: "{{ inputs.parameters.regrid-method }}"
                - name: domain-file
                  value: "{{ inputs.parameters.domainfile0p25x0p25 }}"
                - name: add-cyclic-lon
                  value: "true"
                - name: add-lat-buffer
                  value: "true"
        - - name: move-chunks-to-space
            templateRef:
              name: rechunk
              template: rechunk
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ steps.fine-regrid.outputs.parameters.out-zarr }}"
                - name: time-chunk
                  value: 365
                - name: lat-chunk
                  value: 2
                - name: lon-chunk
                  value: -1


    - name: preprocess-biascorrected
      inputs:
        parameters:
          - name: in-zarr
          - name: regrid-method
            value: "nearest_s2d"
          - name: domain-file
      outputs:
        parameters:
          - name: out-zarr
            valueFrom:
              parameter: "{{ steps.regrid.outputs.parameters.out-zarr }}"
      steps:
        - - name: move-chunks-to-time
            templateRef:
              name: rechunk
              template: rechunk
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ inputs.parameters.in-zarr }}"
                - name: time-chunk
                  value: "73"
                - name: lat-chunk
                  value: -1
                - name: lon-chunk
                  value: -1
        - - name: regrid
            templateRef:
              name: distributed-regrid
              template: main
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ steps.move-chunks-to-time.outputs.parameters.out-zarr }}"
                - name: regrid-method
                  value: "{{ inputs.parameters.regrid-method }}"
                - name: domain-file
                  value: "{{ inputs.parameters.domain-file }}"
                - name: add-cyclic-lon
                  value: "true"
                - name: add-lat-buffer
                  value: "true"


      # Quantile Delta Mapping bias correction, output to staging.
    - name: qdm
      inputs:
        parameters:
          - name: variable
          - name: ref-zarr
          - name: train-zarr
          - name: simulation-zarr
          - name: kind
          - name: first-year
          - name: last-year
          - name: out-zarr
          - name: include-quantiles
            value: "true"
      outputs:
        parameters:
          - name: out-zarr
            valueFrom:
              parameter: "{{ tasks.rechunk-biascorrected.outputs.parameters.out-zarr }}"
      dag:
        tasks:
          - name: prime-qdm-output-zarrstore
            template: prime-qdm-output-zarrstore
            arguments:
              parameters:
                - name: variable
                  value: "{{ inputs.parameters.variable }}"
                - name: simulation-zarr
                  value: "{{ inputs.parameters.simulation-zarr }}"
                - name: first-year
                  value: "{{ inputs.parameters.first-year }}"
                - name: last-year
                  value: "{{ inputs.parameters.last-year }}"
                - name: include-quantiles
                  value: "{{ inputs.parameters.include-quantiles }}"
          - name: with-lat-chunk
            depends: "prime-qdm-output-zarrstore"
            template: with-lat-chunk
            arguments:
              parameters:
                - name: variable
                  value: "{{ inputs.parameters.variable }}"
                - name: ref-zarr
                  value: "{{ inputs.parameters.ref-zarr }}"
                - name: train-zarr
                  value: "{{ inputs.parameters.train-zarr }}"
                - name: simulation-zarr
                  value: "{{ inputs.parameters.simulation-zarr }}"
                - name: first-year
                  value: "{{ inputs.parameters.first-year }}"
                - name: last-year
                  value: "{{ inputs.parameters.last-year }}"
                - name: kind
                  value: "{{ inputs.parameters.kind }}"
                - name: include-quantiles
                  value: "{{ inputs.parameters.include-quantiles }}"
                - name: out-zarr
                  value: "{{ tasks.prime-qdm-output-zarrstore.outputs.parameters.out-zarr }}"
                  # Operate on 10 cell latitude chunks...
                - name: lat-slice-min
                  value: "{{=asInt(item) * 10 }}"
                - name: lat-slice-max
                  value: "{{=asInt(item) * 10 + 10 }}"
            withSequence:
              start: "0"
              end: "17"
          - name: rechunk-biascorrected
            depends: "with-lat-chunk && prime-qdm-output-zarrstore"
            templateRef:
              name: rechunk
              template: rechunk
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ tasks.prime-qdm-output-zarrstore.outputs.parameters.out-zarr }}"
                - name: out-zarr
                  value: "{{ inputs.parameters.out-zarr }}"
                - name: time-chunk
                  value: 73
                - name: lat-chunk
                  value: 10
                - name: lon-chunk
                  value: 180


    - name: prime-qdm-output-zarrstore
      inputs:
        parameters:
          - name: variable
          - name: simulation-zarr
          - name: first-year
          - name: last-year
          - name: out-zarr
            value: "gs://scratch-170cd6ec/{{ workflow.name }}/{{ pod.name }}/qdm_adjusted.zarr"
          - name: include-quantiles
            value: "false"
      outputs:
        parameters:
          - name: out-zarr
            value: "{{ inputs.parameters.out-zarr }}"
      script:
        image: us-central1-docker.pkg.dev/downscalecmip6/private/dodola:0.5.0
        env:
          - name: ARGO_WORKFLOW_NAME
            value: "{{ workflow.name }}"
          - name: ARGO_WORKFLOW_UID
            value: "{{ workflow.uid }}"
          - name: DC6_VERSION_ID
            value: "v{{workflow.creationTimestamp.Y}}{{workflow.creationTimestamp.m}}{{workflow.creationTimestamp.d}}{{workflow.creationTimestamp.H}}{{workflow.creationTimestamp.M}}{{workflow.creationTimestamp.S}}"
        command: [ python ]
        source: |
          import os
          import dodola.repository
          import xarray as xr

          nonlat_variables = ["lon", "time"]
          quantiles_variable = "sim_q"

          simulation_zarr = "{{ inputs.parameters.simulation-zarr }}"
          qdm_out_zarr = "{{ inputs.parameters.out-zarr }}"
          first_year = int({{ inputs.parameters.first-year }})
          last_year = int({{ inputs.parameters.last-year }})
          variable = "{{ inputs.parameters.variable }}"
          include_quantiles = "{{ inputs.parameters.include-quantiles }}".lower() == "true"
          print(f"{include_quantiles=}")  # DEBUG

          timeslice = slice(str(first_year), str(last_year))  # This is inclusive!

          primed_out = dodola.repository.read(simulation_zarr).sel(time=timeslice).chunk({"time": 73, "lat": 10, "lon":180})
          if include_quantiles:
              primed_out[quantiles_variable] = xr.zeros_like(primed_out[variable])

          # Add downscaling metadata to attrs
          primed_out.attrs["dc6_workflow_name"] = os.environ["ARGO_WORKFLOW_NAME"]
          primed_out.attrs["dc6_workflow_uid"] = os.environ["ARGO_WORKFLOW_UID"]
          primed_out.attrs["dc6_version_id"] = os.environ["DC6_VERSION_ID"]

          print(f"{primed_out=}")  # DEBUG

          primed_out.to_zarr(
              qdm_out_zarr,
              mode="w",
              compute=False,
              consolidated=True,
              safe_chunks=False
          )
          print(f"Output written to {qdm_out_zarr}")  # DEBUG

          # Append variables that do not depend on "lat"
          if nonlat_variables:
              primed_out[nonlat_variables].to_zarr(
                  qdm_out_zarr,
                  mode="a",
                  compute=True,
                  consolidated=True,
                  safe_chunks=False
              )
              print(f"Non-latitude variables written to to {qdm_out_zarr}")  # DEBUG
        resources:
          requests:
            memory: 4Gi
            cpu: "1000m"
          limits:
            memory: 4Gi
            cpu: "1000m"
      activeDeadlineSeconds: 900
      retryStrategy:
        limit: 4
        retryPolicy: "Always"


    - name: with-lat-chunk
      inputs:
        parameters:
          - name: variable
          - name: ref-zarr
          - name: train-zarr
          - name: simulation-zarr
          - name: kind
          - name: lat-slice-min
          - name: lat-slice-max
          - name: first-year
          - name: last-year
          - name: include-quantiles
            value: "false"
          - name: out-zarr
      dag:
        tasks:
          - name: train-qdm
            template: train-qdm
            arguments:
              parameters:
                - name: variable
                  value: "{{ inputs.parameters.variable }}"
                - name: ref-zarr
                  value: "{{ inputs.parameters.ref-zarr }}"
                - name: train-zarr
                  value: "{{ inputs.parameters.train-zarr }}"
                - name: kind
                  value: "{{ inputs.parameters.kind }}"
                - name: lat-slice-min
                  value: "{{ inputs.parameters.lat-slice-min }}"
                - name: lat-slice-max
                  value: "{{ inputs.parameters.lat-slice-max }}"
          - name: apply-qdm
            depends: "train-qdm"
            template: apply-qdm
            arguments:
              parameters:
                - name: variable
                  value: "{{ inputs.parameters.variable }}"
                - name: qdm-zarr
                  value: "{{ tasks.train-qdm.outputs.parameters.out-zarr }}"
                - name: simulation-zarr
                  value: "{{ inputs.parameters.simulation-zarr }}"
                - name: first-year
                  value: "{{ inputs.parameters.first-year }}"
                - name: last-year
                  value: "{{ inputs.parameters.last-year }}"
                - name: lat-slice-min
                  value: "{{ inputs.parameters.lat-slice-min }}"
                - name: lat-slice-max
                  value: "{{ inputs.parameters.lat-slice-max }}"
                - name: include-quantiles
                  value: "{{ inputs.parameters.include-quantiles }}"
                - name: out-zarr
                  value: "{{ inputs.parameters.out-zarr }}"


    - name: train-qdm
      inputs:
        parameters:
          - name: variable
          - name: ref-zarr
          - name: train-zarr
          - name: kind
          - name: lat-slice-min
          - name: lat-slice-max
          - name: out-zarr
            value: "gs://scratch-170cd6ec/{{ workflow.name }}/{{ pod.name }}/qdm_model.zarr"
      outputs:
        parameters:
          - name: out-zarr
            value: "{{ inputs.parameters.out-zarr }}"
      script:
        image: us-central1-docker.pkg.dev/downscalecmip6/private/dodola:0.5.0
        command: [ python ]
        source: |
          import os
          import dodola.repository
          from dodola.core import train_quantiledeltamapping

          kind_map = {"multiplicative": "*", "additive": "+"}

          ref_zarr = "{{ inputs.parameters.ref-zarr }}"
          train_zarr = "{{ inputs.parameters.train-zarr }}"
          out_zarr = "{{ inputs.parameters.out-zarr }}"
          min_slice = int({{ inputs.parameters.lat-slice-min }})
          max_slice = int({{ inputs.parameters.lat-slice-max }})
          variable = "{{ inputs.parameters.variable }}"
          kind = kind_map["{{ inputs.parameters.kind }}"]

          latslice = slice(min_slice, max_slice)

          print(f"reading {ref_zarr}")
          reference = dodola.repository.read(ref_zarr).isel(lat=latslice)
          print(f"reading {train_zarr}")
          training = dodola.repository.read(train_zarr).isel(lat=latslice)

          reference.load()
          training.load()

          qdm = train_quantiledeltamapping(
              reference=reference,
              historical=training,
              variable=variable,
              kind=kind,
          )

          dodola.repository.write(out_zarr, qdm.ds)
          print(f"Output written to {out_zarr}")  # DEBUG
        resources:
          requests:
            memory: 8Gi
            cpu: "1000m"
          limits:
            memory: 8Gi
            cpu: "2000m"
      activeDeadlineSeconds: 900
      retryStrategy:
        limit: 1
        retryPolicy: "Always"


    - name: apply-qdm
      inputs:
        parameters:
          - name: variable
          - name: qdm-zarr
          - name: simulation-zarr
          - name: first-year
          - name: last-year
          - name: lat-slice-min
          - name: lat-slice-max
          - name: include-quantiles
            value: "false"
          - name: out-zarr
            value: "gs://scratch-170cd6ec/{{ workflow.name }}/{{ pod.name }}/qdm_adjusted.zarr"
      outputs:
        parameters:
          - name: out-zarr
            value: "{{ inputs.parameters.out-zarr }}"
      script:
        image: us-central1-docker.pkg.dev/downscalecmip6/private/dodola:0.5.0
        command: [ python ]
        source: |
          import dask.delayed
          import dodola.repository
          from dodola.core import adjust_quantiledeltamapping_year
          import xarray as xr

          nonlat_variables = ["lon", "time"]
          quantile_variable = "sim_q"

          qdm_zarr = "{{ inputs.parameters.qdm-zarr }}"
          simulation_zarr = "{{ inputs.parameters.simulation-zarr }}"
          qdm_out_zarr = "{{ inputs.parameters.out-zarr }}"
          min_slice = int({{ inputs.parameters.lat-slice-min }})
          max_slice = int({{ inputs.parameters.lat-slice-max }})
          first_year = int({{ inputs.parameters.first-year }})
          last_year = int({{ inputs.parameters.last-year }})
          variable = "{{ inputs.parameters.variable }}"
          include_quantiles = "{{ inputs.parameters.include-quantiles }}".lower() == "true"
          print(f"{include_quantiles=}")  # DEBUG

          latslice = slice(min_slice, max_slice)

          print(f"slicing({min_slice}, {max_slice})")  # DEBUG

          qdm = dodola.repository.read(qdm_zarr)
          simulation = dodola.repository.read(simulation_zarr).isel(lat=latslice)

          qdm.load()
          simulation.load()

          # TODO: Return this to dask.delayeds instead of raw for loops.
          qdm_list = []
          for year in range(first_year, last_year + 1):
              adj = adjust_quantiledeltamapping_year(
                  simulation=simulation,
                  qdm=qdm,
                  year=year,
                  variable=variable,
                  include_quantiles=include_quantiles
              )
              qdm_list.append(adj.astype("float32"))

          out_all_years = xr.concat(qdm_list, dim="time")
          out_all_years = out_all_years.reset_coords(quantile_variable)

          if nonlat_variables:
              out_all_years = out_all_years.drop_vars(nonlat_variables)

          out_all_years = out_all_years.transpose("time", "lat", "lon")

          with xr.open_zarr(qdm_out_zarr) as out_store:
              out_all_years.attrs |= out_store.attrs
              for k, v in out_store.variables.items():
                  if k in out_all_years:
                      out_all_years[k].attrs |= v.attrs

          print(f"{out_all_years=}")  # DEBUG

          # Output to region of existing zarr store.
          out_all_years.to_zarr(qdm_out_zarr, region={"lat": latslice}, mode="a")
          print(f"Output written to {qdm_out_zarr}")  # DEBUG
        resources:
          requests:
            memory: 32Gi
            cpu: "1000m"
          limits:
            memory: 32Gi
            cpu: "8000m"
      activeDeadlineSeconds: 900
      retryStrategy:
        limit: 3
        retryPolicy: "Always"


    # Easier way to do conditional wet day frequency in Argo 3.1. This evaluates whether we do wet day frequency
    # correction or not and outputs the location of the corrected or uncorrected file if appropriate.
    # It's pretty clunky. Sorry. There has to be a better way to do this.
    - name: wdf-check
      inputs:
        parameters:
          - name: in-zarr
          - name: process  # "pre" or "post"
          - name: correct-bool  # Do the correction? true or false
      steps:
        - - name: correct-wetday-frequency
            template: correct-wetday-frequency
            when: "{{ inputs.parameters.correct-bool }} == true"
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ inputs.parameters.in-zarr }}"
                - name: process  # pre or post
                  value: "{{ inputs.parameters.process }}"
      outputs:
        parameters:
          - name: out-zarr
            valueFrom:
              expression: "inputs.parameters['correct-bool'] == true ? steps.correct-wetday-frequency.outputs.parameters['out-zarr'] : inputs.parameters['in-zarr']"


    - name: correct-wetday-frequency
      inputs:
        parameters:
          - name: in-zarr
          - name: out-zarr
            value: "gs://scratch-170cd6ec/{{ workflow.name }}/{{ pod.name }}/out.zarr"
          - name: process  # pre or post
      outputs:
        parameters:
          - name: out-zarr
            value: "{{ inputs.parameters.out-zarr }}"
      container:
        image: us-central1-docker.pkg.dev/downscalecmip6/private/dodola:0.5.0
        command: [ dodola ]
        args:
          - "correct-wetday-frequency"
          - "{{ inputs.parameters.in-zarr }}"
          - "--out"
          - "{{ inputs.parameters.out-zarr }}"
          - "--process"
          - "{{ inputs.parameters.process }}"
        resources:
          requests:
            memory: 8Gi
            cpu: "1000m"
          limits:
            memory: 8Gi
            cpu: "2000m"
      activeDeadlineSeconds: 600
      retryStrategy:
        limit: 3
        retryPolicy: "Always"


    - name: add-cyclic
      inputs:
        parameters:
          - name: in-zarr
          - name: out-zarr
            value: "gs://scratch-170cd6ec/{{ workflow.name }}/{{ pod.name }}/cyclic-added.zarr"
      outputs:
        parameters:
          - name: out-zarr
            value: "{{ inputs.parameters.out-zarr }}"
      script:
        image: us-central1-docker.pkg.dev/downscalecmip6/private/dodola:0.5.0
        env:
          - name: IN
            value: "{{ inputs.parameters.in-zarr }}"
          - name: OUT
            value: "{{ inputs.parameters.out-zarr }}"
        command: [ python ]
        source: |
          import os
          import dodola.repository as storage
          from dodola.core import _add_cyclic

          ds = storage.read(os.environ.get("IN"))
          ds = _add_cyclic(ds, dim="lon")
          storage.write(os.environ.get("OUT"), ds)
        resources:
          requests:
            memory: 32Gi
            cpu: "1000m"
          limits:
            memory: 32Gi
            cpu: "4000m"
      activeDeadlineSeconds: 480
      retryStrategy:
        limit: 4
        retryPolicy: "Always"


    - name: aiqpd
      inputs:
        parameters:
          - name: simulation-zarr
          - name: coarse-reference-zarr
          - name: fine-reference-zarr
          - name: variable-id
          - name: qdm-kind
          - name: lat-slice-min
          - name: lat-slice-max
          - name: out-zarr
      steps:
        - - name: train-downscaling-model
            template: train-aiqpd
            arguments:
              parameters:
                - name: variable-id
                  value: "{{ inputs.parameters.variable-id }}"
                - name: coarse-reference-zarr
                  value: "{{ inputs.parameters.coarse-reference-zarr }}"
                - name: fine-reference-zarr
                  value: "{{ inputs.parameters.fine-reference-zarr }}"
                - name: qdm-kind
                  value: "{{ inputs.parameters.qdm-kind }}"
                - name: lat-slice-min
                  value: "{{ inputs.parameters.lat-slice-min}}"
                - name: lat-slice-max
                  value: "{{ inputs.parameters.lat-slice-max}}"
        - - name: apply-aiqpd
            template: apply-aiqpd
            arguments:
              parameters:
                - name: variable
                  value: "{{ inputs.parameters.variable-id }}"
                - name: simulation-zarr
                  value: "{{ inputs.parameters.simulation-zarr }}"
                - name: aiqpd-model-zarr
                  value: "{{ steps.train-downscaling-model.outputs.parameters.out-zarr }}"
                - name: qdm-kind
                  value: "{{ inputs.parameters.qdm-kind }}"
                - name: lat-slice-min
                  value: "{{ inputs.parameters.lat-slice-min }}"
                - name: lat-slice-max
                  value: "{{ inputs.parameters.lat-slice-max }}"
                - name: out-zarr
                  value: "{{ inputs.parameters.out-zarr }}"


    - name: train-aiqpd
      inputs:
        parameters:
          - name: coarse-reference-zarr
          - name: fine-reference-zarr
          - name: variable-id
          - name: qdm-kind
          - name: lat-slice-min
          - name: lat-slice-max
          - name: time-sel-start
            value: "1994-12-17"
          - name: time-sel-stop
            value: "2015-01-15"
          - name: out-zarr
            value: "gs://scratch-170cd6ec/{{ workflow.name }}/{{ pod.name }}/aiqpd-model.zarr"
      outputs:
        parameters:
          - name: out-zarr
            value: "{{ inputs.parameters.out-zarr }}"
      script:
        image: us-central1-docker.pkg.dev/downscalecmip6/private/dodola:0.6.0
        command: [ python ]
        source: |
          import os
          import dodola.repository
          from dodola.core import train_analogdownscaling

          kind_map = {"multiplicative": "*", "additive": "+"}

          cref_zarr = "{{ inputs.parameters.coarse-reference-zarr }}"
          fref_zarr = "{{ inputs.parameters.fine-reference-zarr }}"
          out_zarr = "{{ inputs.parameters.out-zarr }}"

          time_sel_start = "{{ inputs.parameters.time-sel-start }}"
          time_sel_stop = "{{ inputs.parameters.time-sel-stop }}"
          min_slice = int({{ inputs.parameters.lat-slice-min }})
          max_slice = int({{ inputs.parameters.lat-slice-max }})

          variable = "{{ inputs.parameters.variable-id }}"
          kind = kind_map["{{ inputs.parameters.qdm-kind }}"]

          latslice = slice(min_slice, max_slice)
          print(f"{latslice=}")  # DEBUG
          timeslice = slice(time_sel_start, time_sel_stop)
          print(f"{timeslice=}")  # DEBUG

          print(f"reading {cref_zarr}")
          creference = dodola.repository.read(cref_zarr)
          print(f"{creference=}")  # DEBUG
          creference = creference.sel(time=timeslice)
          creference = creference.isel(lat=latslice)
          print(f"{creference=}")  # DEBUG

          print(f"reading {fref_zarr}")
          freference = dodola.repository.read(fref_zarr)
          print(f"{freference=}")  # DEBUG
          freference = freference.sel(time=timeslice)
          freference = freference.isel(lat=latslice)
          print(f"{freference=}")  # DEBUG

          creference.load()
          freference.load()

          aiqpd = train_analogdownscaling(
              coarse_reference=creference,
              fine_reference=freference,
              variable=variable,
              kind=kind,
              quantiles_n=620,
              window_n=31,
          )

          print(f"{aiqpd.ds=}")  # DEBUG

          dodola.repository.write(out_zarr, aiqpd.ds)
          print(f"Output written to {out_zarr}")  # DEBUG
        resources:
          requests:
            memory: 12Gi
            cpu: "1000m"
          limits:
            memory: 12Gi
            cpu: "3000m"
      activeDeadlineSeconds: 600
      retryStrategy:
        limit: 2
        retryPolicy: "Always"
        backoff:
          duration: 30s
          factor: 2


    - name: apply-aiqpd
      inputs:
        parameters:
          - name: simulation-zarr
          - name: aiqpd-model-zarr
          - name: variable
          - name: qdm-kind
          - name: lat-slice-min
          - name: lat-slice-max
          - name: out-zarr
            value: "gs://scratch-170cd6ec/{{ workflow.name }}/{{ pod.name }}/aiqpd_adjusted.zarr"
      script:
        image: us-central1-docker.pkg.dev/downscalecmip6/private/dodola:0.6.0
        command: [ python ]
        source: |
          import dodola.repository
          from dodola.core import adjust_analogdownscaling
          import xarray as xr


          nonlat_variables = ["lon", "time"]
          kind_map = {"multiplicative": "*", "additive": "+"}

          sim_zarr = "{{ inputs.parameters.simulation-zarr }}"
          aiqpd_model_zarr = "{{ inputs.parameters.aiqpd-model-zarr }}"
          out_zarr = "{{ inputs.parameters.out-zarr }}"
          min_slice = int({{ inputs.parameters.lat-slice-min }})
          max_slice = int({{ inputs.parameters.lat-slice-max }})
          variable = "{{ inputs.parameters.variable }}"
          kind = kind_map["{{ inputs.parameters.qdm-kind }}"]

          latslice = slice(min_slice, max_slice)
          print(f"{latslice=}")  # DEBUG

          sim_ds = dodola.repository.read(sim_zarr).isel(lat=latslice)
          sim_ds = sim_ds.set_coords(["sim_q"])
          print(f"{sim_ds=}")  # DEBUG
          print("loading data...")
          sim_ds.load()
          print("data loaded")

          aiqpd_ds = dodola.repository.read(aiqpd_model_zarr)
          print(f"{aiqpd_ds=}")  # DEBUG
          print("loading data...")
          aiqpd_ds.load()
          print("data loaded")

          # zarr dimensions can be switched, and if dim order
          # is not lat, lon, dayofyear, quantile, cannot broadcast
          #aiqpd_ds = aiqpd_ds.transpose("lon", "lat", "dayofyear", "quantiles")  # OOM error?

          downscaled_ds = adjust_analogdownscaling(
              simulation=sim_ds,
              aiqpd=aiqpd_ds,
              variable=variable
          )

          downscaled_ds = downscaled_ds.reset_coords(["sim_q"], drop=True)
          if nonlat_variables:
              downscaled_ds = downscaled_ds.drop_vars(nonlat_variables)

          downscaled_ds = downscaled_ds.transpose("time", "lat", "lon")

          with xr.open_zarr(out_zarr) as out_store:
              downscaled_ds.attrs |= out_store.attrs
              for k, v in out_store.variables.items():
                  if k in downscaled_ds:
                      downscaled_ds[k].attrs |= v.attrs

          print(f"{downscaled_ds=}")  # DEBUG

          # Output to region of existing zarr store.
          downscaled_ds[[variable]].to_zarr(
              out_zarr,
              region={"lat": latslice},
              mode="a"
          )
          print(f"Output written to {out_zarr}")  # DEBUG
        resources:
          requests:
            memory: 24Gi
            cpu: "1000m"
          limits:
            memory: 24Gi
            cpu: "6000m"
      activeDeadlineSeconds: 900
      retryStrategy:
        limit: 2
        retryPolicy: "Always"
        backoff:
          duration: 30s
          factor: 2


    # Sets up output zarr file and metadata without writing time-related data to the zarr store.
    - name: prime-aiqpd-biascorrected-output-zarr
      inputs:
        parameters:
          - name: simulation-zarr
          - name: variable
          - name: out-zarr
            value: "gs://scratch-170cd6ec/{{ workflow.name }}/{{ pod.name }}/downscaled.zarr"
          - name: nonlat-variables
            value: "time lon"
      outputs:
        parameters:
          - name: out-zarr
            value: "{{ inputs.parameters.out-zarr }}"
      script:
        image: us-central1-docker.pkg.dev/downscalecmip6/private/dodola:0.5.0
        env:
          - name: ARGO_WORKFLOW_NAME
            value: "{{ workflow.name }}"
          - name: ARGO_WORKFLOW_UID
            value: "{{ workflow.uid }}"
          - name: DC6_VERSION_ID
            value: "v{{workflow.creationTimestamp.Y}}{{workflow.creationTimestamp.m}}{{workflow.creationTimestamp.d}}{{workflow.creationTimestamp.H}}{{workflow.creationTimestamp.M}}{{workflow.creationTimestamp.S}}"
        command: [ python ]
        source: |
          import os
          import dodola.repository
          import xarray as xr

          nonlat_variables = ["lon", "time"]

          simulation_zarr = "{{ inputs.parameters.simulation-zarr }}"
          variable = "{{ inputs.parameters.variable }}"
          out_zarr = "{{ inputs.parameters.out-zarr }}"

          # Select target variable but ensure we include attrs metadata for
          # the original Dataset. Not 100 % sure this is needed.
          ds_out_all = dodola.repository.read(simulation_zarr)
          ds_out = ds_out_all[[variable]]
          ds_out.attrs = ds_out_all.attrs

          # Add downscaling metadata to attrs
          ds_out.attrs["dc6_workflow_name"] = os.environ["ARGO_WORKFLOW_NAME"]
          ds_out.attrs["dc6_workflow_uid"] = os.environ["ARGO_WORKFLOW_UID"]
          ds_out.attrs["dc6_version_id"] = os.environ["DC6_VERSION_ID"]

          print(f"{ds_out=}")  # DEBUG

          # Output metadata to Zarr store.
          ds_out.to_zarr(
              out_zarr,
              mode="w",
              compute=False,
              consolidated=True
          )

          # Append variables that do not depend on "lat"
          if nonlat_variables:
              print(f"{ds_out[nonlat_variables]=}")  # DEBUG
              ds_out[nonlat_variables].to_zarr(
                  out_zarr,
                  mode="a",
                  compute=True,
                  consolidated=True
              )
        resources:
          requests:
            memory: 4Gi
            cpu: "1000m"
          limits:
            memory: 4Gi
            cpu: "1000m"
      activeDeadlineSeconds: 900
      retryStrategy:
        limit: 2
        retryPolicy: "Always"
