apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: biascorrectdownscale
  labels:
    component: biascorrectdownscale
spec:
  workflowMetadata:
    labels:
      component: biascorrectdownscale
  entrypoint: with-jobs
  arguments:
    parameters:
      - name: jobs
        value: |
          [
            {
              "target": "ssp",
              "variable_id": "tasmax",
              "historical": {
                "activity_id": "CMIP",
                "experiment_id": "historical",
                "table_id": "day",
                "variable_id": "tasmax",
                "source_id": "GFDL-ESM4",
                "institution_id": "NOAA-GFDL",
                "member_id": "r1i1p1f1",
                "grid_label": "gr1",
                "version": "20190726"
              },
              "ssp": {
                "activity_id": "ScenarioMIP",
                "experiment_id": "ssp370",
                "table_id": "day",
                "variable_id": "tasmax",
                "source_id": "GFDL-ESM4",
                "institution_id": "NOAA-GFDL",
                "member_id": "r1i1p1f1",
                "grid_label": "gr1",
                "version": "20180701"
              }
            }
          ]
      - name: regrid-method
        value: "bilinear"
      - name: correct-wetday-frequency
        value: "false"
      - name: qdm-kind
        value: "additive"
      - name: apply-dtr-minimum-threshold
        value: "false"
  templates:


      # Loop through each job listed.
    - name: with-jobs
      inputs:
        parameters:
          - name: jobs
          - name: regrid-method
          - name: correct-wetday-frequency  # "true" or "false" STRING!
          - name: qdm-kind  # additive or multiplicative
          - name: apply-dtr-minimum-threshold
      steps:
        - - name: variable-id-switch
            template: variable-id-switch
            arguments:
              parameters:
                - name: job
                  value: "{{ item }}"
                - name: regrid-method
                  value: "{{ inputs.parameters.regrid-method }}"
                - name: correct-wetday-frequency
                  value: "{{ inputs.parameters.correct-wetday-frequency }}"
                - name: apply-dtr-minimum-threshold
                  value: "{{ inputs.parameters.apply-dtr-minimum-threshold }}"
                - name: qdm-kind
                  value: "{{ inputs.parameters.qdm-kind }}"
            withParam: "{{ inputs.parameters.jobs }}"

    # We need different behavior for different variable_ids...
    - name: variable-id-switch
      inputs:
        parameters:
          - name: job
          - name: regrid-method
          - name: correct-wetday-frequency
          - name: apply-dtr-minimum-threshold
          - name: qdm-kind
          - name: variable-id
            value: "{{=jsonpath(inputs.parameters.job, '$.variable_id') }}"
      steps:
        - - name: parameterize-simple-job
            template: parameterize
            arguments:
              parameters:
                - name: target
                  value: "{{=jsonpath(inputs.parameters.job, '$.target')}}"
                - name: historical
                  value: "{{=toJson(jsonpath(inputs.parameters.job, '$.historical'))}}"
                - name: ssp
                  value: "{{=toJson(jsonpath(inputs.parameters.job, '$.ssp'))}}"
                - name: regrid-method
                  value: "{{ inputs.parameters.regrid-method }}"
                - name: correct-wetday-frequency
                  value: "{{ inputs.parameters.correct-wetday-frequency }}"
                - name: apply-dtr-minimum-threshold
                  value: "{{ inputs.parameters.apply-dtr-minimum-threshold }}"
                - name: qdm-kind
                  value: "{{ inputs.parameters.qdm-kind }}"
            when: "{{ inputs.parameters.variable-id }} != 'dtr'"

            # DTR has specs for tasmax and tasmin. dtr is cleaned and stored
            # using metadata from its tasmin CMIP6 input. Use tasmin specs but
            # switch variable_id to "dtr".
          - name: parameterize-dtr-job
            template: parameterize
            arguments:
              parameters:
                - name: target
                  value: "{{=jsonpath(inputs.parameters.job, '$.target')}}"
                - name: historical
                  value: >-
                    {{=toJson(
                      {
                        "variable_id": "dtr",
                        "activity_id": jsonpath(inputs.parameters.job, '$.tasmin.historical.activity_id'),
                        "experiment_id": jsonpath(inputs.parameters.job, '$.tasmin.historical.experiment_id'),
                        "table_id": jsonpath(inputs.parameters.job, '$.tasmin.historical.table_id'),
                        "source_id": jsonpath(inputs.parameters.job, '$.tasmin.historical.source_id'),
                        "institution_id": jsonpath(inputs.parameters.job, '$.tasmin.historical.institution_id'),
                        "member_id": jsonpath(inputs.parameters.job, '$.tasmin.historical.member_id'),
                        "grid_label": jsonpath(inputs.parameters.job, '$.tasmin.historical.grid_label'),
                        "version": jsonpath(inputs.parameters.job, '$.tasmin.historical.version')
                      }
                    )}}
                - name: ssp
                  value: >-
                    {{=toJson(
                      {
                        "variable_id": "dtr",
                        "activity_id": jsonpath(inputs.parameters.job, '$.tasmin.ssp.activity_id'),
                        "experiment_id": jsonpath(inputs.parameters.job, '$.tasmin.ssp.experiment_id'),
                        "table_id": jsonpath(inputs.parameters.job, '$.tasmin.ssp.table_id'),
                        "source_id": jsonpath(inputs.parameters.job, '$.tasmin.ssp.source_id'),
                        "institution_id": jsonpath(inputs.parameters.job, '$.tasmin.ssp.institution_id'),
                        "member_id": jsonpath(inputs.parameters.job, '$.tasmin.ssp.member_id'),
                        "grid_label": jsonpath(inputs.parameters.job, '$.tasmin.ssp.grid_label'),
                        "version": jsonpath(inputs.parameters.job, '$.tasmin.ssp.version')
                      }
                    )}}
                - name: regrid-method
                  value: "{{ inputs.parameters.regrid-method }}"
                - name: correct-wetday-frequency
                  value: "{{ inputs.parameters.correct-wetday-frequency }}"
                - name: apply-dtr-minimum-threshold
                  value: "{{ inputs.parameters.apply-dtr-minimum-threshold }}"
                - name: qdm-kind
                  value: "{{ inputs.parameters.qdm-kind }}"
            when: "{{ inputs.parameters.variable-id }} == 'dtr'"


      # Start work for target simulation, with target-specific configs.
    - name: parameterize
      inputs:
        parameters:
          - name: target
          - name: ssp
          - name: historical
          - name: regrid-method
          - name: qdm-kind
          - name: correct-wetday-frequency
          - name: apply-dtr-minimum-threshold
          - name: domainfile1x1
            value: "gs://support-f8a48a9e/domain.1x1.zarr"
          - name: domainfile0p25x0p25
            value: "gs://support-f8a48a9e/domain.0p25x0p25.zarr"
      steps:
        - - name: historical
            template: biascorrectdownscale
            arguments:
              parameters:
                - name: simulation
                  value: "{{ inputs.parameters.historical }}"
                - name: historical
                  value: "{{ inputs.parameters.historical }}"
                - name: regrid-method
                  value: "{{ inputs.parameters.regrid-method }}"
                - name: qdm-kind
                  value: "{{ inputs.parameters.qdm-kind }}"
                - name: correct-wetday-frequency
                  value: "{{ inputs.parameters.correct-wetday-frequency }}"
                - name: apply-dtr-minimum-threshold
                  value: "{{ inputs.parameters.apply-dtr-minimum-threshold }}"
                - name: first-year
                  value: 1950
                - name: domainfile1x1
                  value: "{{ inputs.parameters.domainfile1x1 }}"
                - name: domainfile0p25x0p25
                  value: "{{ inputs.parameters.domainfile0p25x0p25 }}"
            when: "{{inputs.parameters.target}} == historical"
          - name: ssp
            template: biascorrectdownscale
            arguments:
              parameters:
                - name: simulation
                  value: "{{ inputs.parameters.ssp }}"
                - name: historical
                  value: "{{ inputs.parameters.historical }}"
                - name: regrid-method
                  value: "{{ inputs.parameters.regrid-method }}"
                - name: qdm-kind
                  value: "{{ inputs.parameters.qdm-kind }}"
                - name: correct-wetday-frequency
                  value: "{{ inputs.parameters.correct-wetday-frequency }}"
                - name: apply-dtr-minimum-threshold
                  value: "{{ inputs.parameters.apply-dtr-minimum-threshold }}"
                - name: first-year
                  value: 2015
                - name: domainfile1x1
                  value: "{{ inputs.parameters.domainfile1x1 }}"
                - name: domainfile0p25x0p25
                  value: "{{ inputs.parameters.domainfile0p25x0p25 }}"
            when: "{{inputs.parameters.target}} == ssp"


    - name: biascorrectdownscale
      inputs:
        parameters:
          - name: simulation
          - name: historical
          - name: regrid-method
          - name: qdm-kind
          - name: correct-wetday-frequency
          - name: apply-dtr-minimum-threshold
          - name: first-year
          - name: domainfile1x1
          - name: domainfile0p25x0p25
          - name: reference-zarr
            # Use simulation variable_id to get reference URL.
            value: >-
              gs://clean-f1e04ef5/reanalysis/ERA-5/F320/{{=jsonpath(inputs.parameters.simulation, '$.variable_id')}}.1995-2015.F320.zarr
      dag:
        tasks:
          - name: get-input-clean-training-url
            templateRef:
              name: catalog
              template: get-fsspec-url-from-parameters
            arguments:
              parameters:
                - name: experiment-id
                  value: "training"
                - name: activity-id
                  value: "{{=jsonpath(inputs.parameters.historical, '$.activity_id')}}"
                - name: table-id
                  value: "{{=jsonpath(inputs.parameters.historical, '$.table_id')}}"
                - name: variable-id
                  value: "{{=jsonpath(inputs.parameters.historical, '$.variable_id')}}"
                - name: source-id
                  value: "{{=jsonpath(inputs.parameters.historical, '$.source_id')}}"
                - name: institution-id
                  value: "{{=jsonpath(inputs.parameters.historical, '$.institution_id')}}"
                - name: member-id
                  value: "{{=jsonpath(inputs.parameters.historical, '$.member_id')}}"
                - name: grid-label
                  value: "{{=jsonpath(inputs.parameters.historical, '$.grid_label')}}"
                - name: version
                  value: "{{=jsonpath(inputs.parameters.historical, '$.version')}}"
                - name: base-url
                  value: "gs://clean-f1e04ef5/cmip6"
          - name: get-input-clean-simulation-url
            templateRef:
              name: catalog
              template: get-fsspec-url-from-parameters
            arguments:
              parameters:
                - name: experiment-id
                  value: "{{=jsonpath(inputs.parameters.simulation, '$.experiment_id')}}"
                - name: activity-id
                  value: "{{=jsonpath(inputs.parameters.simulation, '$.activity_id')}}"
                - name: table-id
                  value: "{{=jsonpath(inputs.parameters.simulation, '$.table_id')}}"
                - name: variable-id
                  value: "{{=jsonpath(inputs.parameters.simulation, '$.variable_id')}}"
                - name: source-id
                  value: "{{=jsonpath(inputs.parameters.simulation, '$.source_id')}}"
                - name: institution-id
                  value: "{{=jsonpath(inputs.parameters.simulation, '$.institution_id')}}"
                - name: member-id
                  value: "{{=jsonpath(inputs.parameters.simulation, '$.member_id')}}"
                - name: grid-label
                  value: "{{=jsonpath(inputs.parameters.simulation, '$.grid_label')}}"
                - name: version
                  value: "{{=jsonpath(inputs.parameters.simulation, '$.version')}}"
                - name: base-url
                  value: "gs://clean-f1e04ef5/cmip6"
          - name: get-output-biascorrected-url
            templateRef:
              name: catalog
              template: get-fsspec-url-from-parameters
            arguments:
              parameters:
                - name: experiment-id
                  value: "{{=jsonpath(inputs.parameters.simulation, '$.experiment_id')}}"
                - name: activity-id
                  value: "{{=jsonpath(inputs.parameters.simulation, '$.activity_id')}}"
                - name: table-id
                  value: "{{=jsonpath(inputs.parameters.simulation, '$.table_id')}}"
                - name: variable-id
                  value: "{{=jsonpath(inputs.parameters.simulation, '$.variable_id')}}"
                - name: source-id
                  value: "{{=jsonpath(inputs.parameters.simulation, '$.source_id')}}"
                - name: institution-id
                  value: "{{=jsonpath(inputs.parameters.simulation, '$.institution_id')}}"
                - name: member-id
                  value: "{{=jsonpath(inputs.parameters.simulation, '$.member_id')}}"
                - name: grid-label
                  value: "{{=jsonpath(inputs.parameters.simulation, '$.grid_label')}}"
                - name: version
                  value: "{{workflow.creationTimestamp.Y}}{{workflow.creationTimestamp.m}}{{workflow.creationTimestamp.d}}{{workflow.creationTimestamp.H}}{{workflow.creationTimestamp.M}}{{workflow.creationTimestamp.S}}"
                - name: base-url
                  value: "gs://biascorrected-4a21ed18/stage"
          - name: get-output-downscaled-url
            templateRef:
              name: catalog
              template: get-fsspec-url-from-parameters
            arguments:
              parameters:
                - name: experiment-id
                  value: "{{=jsonpath(inputs.parameters.simulation, '$.experiment_id')}}"
                - name: activity-id
                  value: "{{=jsonpath(inputs.parameters.simulation, '$.activity_id')}}"
                - name: table-id
                  value: "{{=jsonpath(inputs.parameters.simulation, '$.table_id')}}"
                - name: variable-id
                  value: "{{=jsonpath(inputs.parameters.simulation, '$.variable_id')}}"
                - name: source-id
                  value: "{{=jsonpath(inputs.parameters.simulation, '$.source_id')}}"
                - name: institution-id
                  value: "{{=jsonpath(inputs.parameters.simulation, '$.institution_id')}}"
                - name: member-id
                  value: "{{=jsonpath(inputs.parameters.simulation, '$.member_id')}}"
                - name: grid-label
                  value: "{{=jsonpath(inputs.parameters.simulation, '$.grid_label')}}"
                - name: version
                  value: "{{workflow.creationTimestamp.Y}}{{workflow.creationTimestamp.m}}{{workflow.creationTimestamp.d}}{{workflow.creationTimestamp.H}}{{workflow.creationTimestamp.M}}{{workflow.creationTimestamp.S}}"
                - name: base-url
                  value: "gs://downscaled-48ec31ab/stage"
          - name: get-biascorrected-last-year
            template: get-biascorrected-last-year
            depends: get-input-clean-simulation-url
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ tasks.get-input-clean-simulation-url.outputs.parameters.out-url }}"
          - name: biascorrect
            templateRef:
              name: qdm
              template: main
            depends: >-
              get-input-clean-simulation-url
              && get-input-clean-training-url
              && get-biascorrected-last-year
            arguments:
              parameters:
                - name: variable-id
                  value: "{{=jsonpath(inputs.parameters.simulation, '$.variable_id')}}"
                - name: reference-zarr
                  value: "{{ inputs.parameters.reference-zarr }}"
                - name: training-zarr
                  value: "{{ tasks.get-input-clean-training-url.outputs.parameters.out-url }}"
                - name: simulation-zarr
                  value: "{{ tasks.get-input-clean-simulation-url.outputs.parameters.out-url }}"
                - name: out-zarr
                  value: "gs://impactlab-data-scratch/{{ workflow.uid }}/{{ pod.name }}/qdm-adjusted.zarr"
                - name: regrid-method
                  value: "{{ inputs.parameters.regrid-method }}"
                - name: domainfile1x1
                  value: "{{ inputs.parameters.domainfile1x1 }}"
                - name: correct-wetday-frequency
                  value: "{{ inputs.parameters.correct-wetday-frequency }}"
                - name: apply-dtr-minimum-threshold
                  value: "{{ inputs.parameters.apply-dtr-minimum-threshold }}"
                - name: qdm-kind
                  value: "{{ inputs.parameters.qdm-kind }}"
                - name: first-year
                  value: "{{ inputs.parameters.first-year }}"
                - name: last-year
                  value: "{{ tasks.get-biascorrected-last-year.outputs.parameters.last-year }}"
          - name: rechunk-biascorrected
            depends: "get-output-biascorrected-url && biascorrect"
            templateRef:
              name: rechunk
              template: rechunk
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ tasks.biascorrect.outputs.parameters.out-zarr }}"
                - name: out-zarr
                  value: "{{ tasks.get-output-biascorrected-url.outputs.parameters.out-url }}"
                - name: time-chunk
                  value: 73
                - name: lat-chunk
                  value: 10
                - name: lon-chunk
                  value: 180
          - name: validate-biascorrected
            depends: rechunk-biascorrected
            templateRef:
              name: qualitycontrol-check-cmip6
              template: qualitycontrol-check-cmip6
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ tasks.rechunk-biascorrected.outputs.parameters.out-zarr }}"
                - name: variable
                  value: "{{=jsonpath(inputs.parameters.simulation, '$.variable_id')}}"
                - name: data
                  value: "bias_corrected"
                - name: time
                  value: >-
                    {{=jsonpath(inputs.parameters.simulation, '$.experiment_id') == 'historical' ? 'historical' : 'future'}}
          - name: create-fine-reference
            templateRef:
              name: qplad
              template: create-fine-reference
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ inputs.parameters.reference-zarr }}"
                - name: regrid-method
                  value: "{{ inputs.parameters.regrid-method }}"
                - name: domain-file
                  value: "{{ inputs.parameters.domainfile0p25x0p25 }}"
          - name: create-coarse-reference
            templateRef:
              name: qplad
              template: create-coarse-reference
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ inputs.parameters.reference-zarr }}"
                - name: regrid-method
                  value: "{{ inputs.parameters.regrid-method }}"
                - name: domainfile0p25x0p25
                  value: "{{ inputs.parameters.domainfile0p25x0p25 }}"
                - name: domainfile1x1
                  value: "{{ inputs.parameters.domainfile1x1 }}"
          - name: preprocess-biascorrected
            templateRef:
              name: qplad
              template: preprocess-biascorrected
            depends: rechunk-biascorrected && validate-biascorrected
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ tasks.rechunk-biascorrected.outputs.parameters.out-zarr }}"
                - name: domain-file
                  value: "{{ inputs.parameters.domainfile0p25x0p25 }}"
          - name: qplad
            depends: >-
              get-output-downscaled-url
              && preprocess-biascorrected
              && create-coarse-reference
              && create-fine-reference
            templateRef:
              name: qplad
              template: qplad
            arguments:
              parameters:
                - name: variable-id
                  value: "{{=jsonpath(inputs.parameters.simulation, '$.variable_id')}}"
                - name: simulation-zarr
                  value: "{{ tasks.preprocess-biascorrected.outputs.parameters.out-zarr }}"
                - name: coarse-reference-zarr
                  value: "{{ tasks.create-coarse-reference.outputs.parameters.out-zarr }}"
                - name: fine-reference-zarr
                  value: "{{ tasks.create-fine-reference.outputs.parameters.out-zarr }}"
                - name: qdm-kind
                  value: "{{ inputs.parameters.qdm-kind }}"
                - name: out-zarr
                  value: "{{ tasks.get-output-downscaled-url.outputs.parameters.out-url }}"
                - name: correct-wetday-frequency
                  value: "{{ inputs.parameters.correct-wetday-frequency }}"
          - name: validate-downscaled
            depends: qplad
            templateRef:
              name: qualitycontrol-check-cmip6
              template: qualitycontrol-check-cmip6
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ tasks.qplad.outputs.parameters.out-zarr }}"
                - name: variable
                  value: "{{=jsonpath(inputs.parameters.simulation, '$.variable_id')}}"
                - name: data
                  value: "downscaled"
                - name: time
                  value: >-
                    {{=jsonpath(inputs.parameters.simulation, '$.experiment_id') == 'historical' ? 'historical' : 'future'}}


      # This template helps to dynamically find the last year for bias-corrected
      # output based on the years available in the input simulation.
      # Different experiments have different end dates and we don't want to
      # make up data where it didn't already exist.
    - name: get-biascorrected-last-year
      inputs:
        parameters:
          - name: in-zarr
          - name: time-variable-name
            value: "time"
      outputs:
        parameters:
          - name: last-year
            valueFrom:
              path: "/tmp/lastyear.txt"
      script:
        image: ghcr.io/climateimpactlab/dodola:0.19.0
        command: [ python ]
        source: |
          import dodola.repository

          input_zarr = "{{ inputs.parameters.in-zarr }}"
          time_variable = "{{ inputs.parameters.time-variable-name }}"

          print(f"Reading {input_zarr}")
          ds = dodola.repository.read(input_zarr)

          # Getting the full date is useful for debugging.
          max_date = ds[time_variable].max().item()
          print(f"Found {max_date=}")

          max_year = max_date.year
          out_lastyear = 2014   # For historical simulations.
          # For ssp* experiment simulations:
          if max_year == 2099:
              out_lastyear = 2099
          elif max_year >= 2100:
              out_lastyear = 2100

          print(f"Using {out_lastyear=}")
          with open("/tmp/lastyear.txt", mode="w") as fl:
              fl.write(str(out_lastyear))
        resources:
          requests:
            memory: 1Gi
            cpu: "100m"
          limits:
            memory: 2Gi
            cpu: "1000m"
      activeDeadlineSeconds: 900
      retryStrategy:
        limit: 4
        retryPolicy: "Always"
        backoff:
          duration: 30s
          factor: 2
