apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: qdm
  annotations:
    workflows.argoproj.io/description: >-
      Quantile Delta Mapping bias correction for CMIP6 GCM Zarr Stores.
    workflows.argoproj.io/tags: zarr,biascorrect,cmip6,qdm,dc6
    workflows.argoproj.io/version: '>= 3.1.0'
  labels:
    component: biascorrect
spec:
  entrypoint: main
  arguments:
    parameters:
      - name: simulation-zarr
        value: "gs://clean-b1dbca25/cmip6/ScenarioMIP/NOAA-GFDL/GFDL-ESM4/ssp370/r1i1p1f1/day/tasmax/gr1/v20180701.zarr"
      - name: variable-id
        value: "tasmax"
      - name: training-zarr
        value: "gs://clean-b1dbca25/cmip6/CMIP/NOAA-GFDL/GFDL-ESM4/training/r1i1p1f1/day/tasmax/gr1/v20190726.zarr"
      - name: reference-zarr
        value: "gs://clean-b1dbca25/reanalysis/ERA-5/F320/tasmax.1995-2015.F320.zarr"
      - name: out-zarr
        value: "gs://scratch-170cd6ec/{{ workflow.uid }}/{{ pod.name }}/biascorrected.zarr"
      - name: regrid-method
        value: "bilinear"
      - name: qdm-kind
        value: "additive"
      - name: domainfile1x1
        value: "gs://support-c23ff1a3/domain.1x1.zarr"
      - name: correct-wetday-frequency
        value: "false"
      - name: apply-dtr-minimum-threshold
        value: "false"
      - name: first-year
        value: 2015
      - name: last-year
        value: 2100
  templates:

    - name: main
      inputs:
        parameters:
          - name: variable-id
          - name: simulation-zarr
          - name: training-zarr
          - name: reference-zarr
          - name: out-zarr
          - name: regrid-method
          - name: domainfile1x1
          - name: correct-wetday-frequency
          - name: apply-dtr-minimum-threshold
          - name: qdm-kind
          - name: first-year
          - name: last-year
      outputs:
        parameters:
          - name: out-zarr
            valueFrom:
              parameter: "{{ tasks.qdm.outputs.parameters.out-zarr }}"
      dag:
        tasks:
          - name: preprocess-reference
            template: preprocess
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ inputs.parameters.reference-zarr }}"
                - name: regrid-method
                  value: "{{ inputs.parameters.regrid-method }}"
                - name: domain-file
                  value: "{{ inputs.parameters.domainfile1x1 }}"
                - name: correct-wetday-frequency
                  value: "false"
                - name: add-cyclic
                  value: "false"
                - name: apply-dtr-minimum-threshold
                  value: "false"
          - name: preprocess-training
            template: preprocess
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ inputs.parameters.training-zarr }}"
                - name: regrid-method
                  value: "{{ inputs.parameters.regrid-method }}"
                - name: domain-file
                  value: "{{ inputs.parameters.domainfile1x1 }}"
                - name: correct-wetday-frequency
                  value: "{{ inputs.parameters.correct-wetday-frequency }}"
                - name: apply-dtr-minimum-threshold
                  value: "{{ inputs.parameters.apply-dtr-minimum-threshold }}"
          - name: preprocess-simulation
            template: preprocess
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ inputs.parameters.simulation-zarr }}"
                - name: regrid-method
                  value: "{{ inputs.parameters.regrid-method }}"
                - name: domain-file
                  value: "{{ inputs.parameters.domainfile1x1 }}"
                - name: correct-wetday-frequency
                  value: "{{ inputs.parameters.correct-wetday-frequency }}"
                - name: apply-dtr-minimum-threshold
                  value: "{{ inputs.parameters.apply-dtr-minimum-threshold }}"
          - name: qdm
            depends: >-
              preprocess-reference
              && preprocess-training
              && preprocess-simulation
            template: qdm
            arguments:
              parameters:
                - name: variable
                  value: "{{ inputs.parameters.variable-id }}"
                - name: ref-zarr
                  value: "{{ tasks.preprocess-reference.outputs.parameters.out-zarr }}"
                - name: train-zarr
                  value: "{{ tasks.preprocess-training.outputs.parameters.out-zarr }}"
                - name: simulation-zarr
                  value: "{{ tasks.preprocess-simulation.outputs.parameters.out-zarr }}"
                - name: out-zarr
                  value: "{{ inputs.parameters.out-zarr }}"
                - name: kind
                  value: "{{ inputs.parameters.qdm-kind }}"
                - name: first-year
                  value: "{{ inputs.parameters.first-year }}"
                - name: last-year
                  value: "{{ inputs.parameters.last-year }}"


    - name: preprocess
      inputs:
        parameters:
          - name: in-zarr
          - name: out-zarr
            value: "gs://scratch-170cd6ec/{{ workflow.uid }}/{{ pod.name }}/preprocessed.zarr"
          - name: regrid-method
          - name: domain-file
          - name: correct-wetday-frequency
          - name: apply-dtr-minimum-threshold
          - name: add-cyclic
            value: "lon"
      outputs:
        parameters:
          - name: out-zarr
            value: "{{ inputs.parameters.out-zarr }}"
      script:
        image: us-central1-docker.pkg.dev/downscalecmip6/private/dodola:dev
        command: [ python ]
        source: |
          import logging
          import dodola.services

          logging.basicConfig(level=logging.INFO)
          logger = logging.getLogger(__name__)

          input_zarr = "{{ inputs.parameters.in-zarr }}"

          # This is only applied to CMIP6 DTR.
          apply_minimum_threshold = "{{ inputs.parameters.apply-dtr-minimum-threshold }}".lower() == "true"
          if apply_minimum_threshold:
              logger.info("Applying DTR minimum threshold")
              min_thresholded_zarr = "/workspace/min_thresholded.zarr"
              dodola.services.correct_small_dtr(input_zarr, min_thresholded_zarr)
              input_zarr = min_thresholded_zarr

          correct_wetday_frequency = "{{ inputs.parameters.correct-wetday-frequency }}".lower() == "true"
          if correct_wetday_frequency:
              logger.info("Applying wet-day frequency correction")
              wdf_corrected_zarr = "/workspace/wdf_corrected.zarr"
              dodola.services.correct_wet_day_frequency(
                  input_zarr,
                  process="pre",
                  out=wdf_corrected_zarr
              )
              input_zarr = wdf_corrected_zarr

          # Prevents regridding artifacts along international dateline.
          add_cyclic = "{{ inputs.parameters.add-cyclic }}".lower()
          if add_cyclic != "false":
              logger.info("Adding cyclic wraparound pixels")

              import dodola.repository as storage
              from dodola.core import _add_cyclic

              cyclic_added_zarr = "/workspace/cyclic_added.zarr"
              storage.write(
                  cyclic_added_zarr,
                  _add_cyclic(storage.read(input_zarr), dim=add_cyclic)
              )
              input_zarr = cyclic_added_zarr

          # Regridding requires lat/lon to be contiguous.
          dodola.services.rechunk(
              input_zarr,
              target_chunks = {"time": 365, "lat": -1, "lon": -1},
              out="/workspace/annual_chunks.zarr"
          )

          dodola.services.regrid(
              "/workspace/annual_chunks.zarr",
              method="{{ inputs.parameters.regrid-method }}",
              domain_file="{{ inputs.parameters.domain-file }}",
              astype="float32",
              out="/workspace/regridded.zarr"
          )

          # QDM steps require time to be contiguous in memory.
          dodola.services.rechunk(
              "/workspace/regridded.zarr",
              target_chunks = {"time": -1, "lat": 10, "lon": 10},
              out="{{ inputs.parameters.out-zarr }}"
          )
        resources:
          requests:
            memory: 16Gi
            cpu: "1000m"
          limits:
            memory: 18Gi
            cpu: "2000m"
        volumeMounts:
          - mountPath: /workspace
            name: workspace
      volumes:
        - name: workspace
          emptyDir:
            sizeLimit: 40Gi
      activeDeadlineSeconds: 1200
      retryStrategy:
        limit: 4
        retryPolicy: "Always"
        backoff:
          duration: 30s
          factor: 2


      # Quantile Delta Mapping bias correction, output to staging.
    - name: qdm
      inputs:
        parameters:
          - name: variable
          - name: ref-zarr
          - name: train-zarr
          - name: simulation-zarr
          - name: kind
          - name: first-year
          - name: last-year
          - name: out-zarr
          - name: include-quantiles
            value: "true"
      outputs:
        parameters:
          - name: out-zarr
            valueFrom:
              parameter: "{{ tasks.prime-qdm-output-zarrstore.outputs.parameters.out-zarr }}"
      dag:
        tasks:
          - name: create-qdm-output-metadata
            templateRef:
              name: create-output-metadata-json
              template: create-output-metadata-json
            arguments:
              parameters:
                - name: in-zarr
                  value: "{{ inputs.parameters.simulation-zarr }}"
                - name: workflowstep
                  value: biascorrect
          - name: prime-qdm-output-zarrstore
            depends: "create-qdm-output-metadata"
            template: prime-qdm-output-zarrstore
            arguments:
              parameters:
                - name: variable
                  value: "{{ inputs.parameters.variable }}"
                - name: simulation-zarr
                  value: "{{ inputs.parameters.simulation-zarr }}"
                - name: first-year
                  value: "{{ inputs.parameters.first-year }}"
                - name: last-year
                  value: "{{ inputs.parameters.last-year }}"
                - name: include-quantiles
                  value: "{{ inputs.parameters.include-quantiles }}"
              artifacts:
                - name: global-attrs-json
                  from: "{{ tasks.create-qdm-output-metadata.outputs.artifacts.global-attrs-json }}"
          - name: with-lat-chunk
            depends: "prime-qdm-output-zarrstore && create-qdm-output-metadata"
            template: with-lat-chunk
            arguments:
              parameters:
                - name: variable
                  value: "{{ inputs.parameters.variable }}"
                - name: ref-zarr
                  value: "{{ inputs.parameters.ref-zarr }}"
                - name: train-zarr
                  value: "{{ inputs.parameters.train-zarr }}"
                - name: simulation-zarr
                  value: "{{ inputs.parameters.simulation-zarr }}"
                - name: first-year
                  value: "{{ inputs.parameters.first-year }}"
                - name: last-year
                  value: "{{ inputs.parameters.last-year }}"
                - name: kind
                  value: "{{ inputs.parameters.kind }}"
                - name: include-quantiles
                  value: "{{ inputs.parameters.include-quantiles }}"
                - name: out-zarr
                  value: "{{ tasks.prime-qdm-output-zarrstore.outputs.parameters.out-zarr }}"
                  # Operate on 10 cell latitude chunks...
                - name: lat-slice-min
                  value: "{{=asInt(item) * 10 }}"
                - name: lat-slice-max
                  value: "{{=asInt(item) * 10 + 10 }}"
              artifacts:
                - name: global-attrs-json
                  from: "{{ tasks.create-qdm-output-metadata.outputs.artifacts.global-attrs-json }}"
            withSequence:
              start: "0"
              end: "17"


    - name: with-lat-chunk
      inputs:
        parameters:
          - name: variable
          - name: ref-zarr
          - name: train-zarr
          - name: simulation-zarr
          - name: kind
          - name: lat-slice-min
          - name: lat-slice-max
          - name: first-year
          - name: last-year
          - name: include-quantiles
          - name: out-zarr
        artifacts:
          - name: global-attrs-json
      dag:
        tasks:
          - name: train-qdm
            template: train-qdm
            arguments:
              parameters:
                - name: variable
                  value: "{{ inputs.parameters.variable }}"
                - name: ref-zarr
                  value: "{{ inputs.parameters.ref-zarr }}"
                - name: train-zarr
                  value: "{{ inputs.parameters.train-zarr }}"
                - name: kind
                  value: "{{ inputs.parameters.kind }}"
                - name: lat-slice-min
                  value: "{{ inputs.parameters.lat-slice-min }}"
                - name: lat-slice-max
                  value: "{{ inputs.parameters.lat-slice-max }}"
          - name: apply-qdm
            depends: "train-qdm"
            template: apply-qdm
            arguments:
              parameters:
                - name: variable
                  value: "{{ inputs.parameters.variable }}"
                - name: qdm-zarr
                  value: "{{ tasks.train-qdm.outputs.parameters.out-zarr }}"
                - name: simulation-zarr
                  value: "{{ inputs.parameters.simulation-zarr }}"
                - name: ref-zarr
                  value: "{{ inputs.parameters.ref-zarr }}"
                - name: first-year
                  value: "{{ inputs.parameters.first-year }}"
                - name: last-year
                  value: "{{ inputs.parameters.last-year }}"
                - name: lat-slice-min
                  value: "{{ inputs.parameters.lat-slice-min }}"
                - name: lat-slice-max
                  value: "{{ inputs.parameters.lat-slice-max }}"
                - name: include-quantiles
                  value: "{{ inputs.parameters.include-quantiles }}"
                - name: out-zarr
                  value: "{{ inputs.parameters.out-zarr }}"
              artifacts:
                - name: global-attrs-json
                  from: "{{ inputs.artifacts.global-attrs-json }}"


    - name: prime-qdm-output-zarrstore
      inputs:
        parameters:
          - name: variable
          - name: simulation-zarr
          - name: first-year
          - name: last-year
          - name: out-zarr
            value: "gs://scratch-170cd6ec/{{ workflow.uid }}/{{ pod.name }}/qdm_adjusted.zarr"
        artifacts:
          - name: global-attrs-json
            path: /tmp/global_attrs.json
      outputs:
        parameters:
          - name: out-zarr
            value: "{{ inputs.parameters.out-zarr }}"
      container:
        image: us-central1-docker.pkg.dev/downscalecmip6/private/dodola:0.10.0
        command: [ dodola ]
        args:
          - "prime-qdm-output-zarrstore"
          - "--simulation={{ inputs.parameters.simulation-zarr }}"
          - "--variable={{ inputs.parameters.variable }}"
          - "--years={{ inputs.parameters.first-year }},{{ inputs.parameters.last-year }}"
          - "--out={{ inputs.parameters.out-zarr }}"
          - "--zarr-region-dims=lat"
          - "--root-attrs-json-file=/tmp/global_attrs.json"
        resources:
          requests:
            memory: 4Gi
            cpu: "1000m"
          limits:
            memory: 4Gi
            cpu: "1000m"
      activeDeadlineSeconds: 900
      retryStrategy:
        limit: 4
        retryPolicy: "Always"


    - name: train-qdm
      inputs:
        parameters:
          - name: variable
          - name: ref-zarr
          - name: train-zarr
          - name: lat-slice-min
          - name: lat-slice-max
          - name: kind
          - name: out-zarr
            value: "gs://scratch-170cd6ec/{{ workflow.uid }}/{{ pod.name }}/qdm_model.zarr"
      outputs:
        parameters:
          - name: out-zarr
            value: "{{ inputs.parameters.out-zarr }}"
      container:
        image: us-central1-docker.pkg.dev/downscalecmip6/private/dodola:0.10.0
        command: [ "dodola" ]
        args:
          - "train-qdm"
          - "--variable={{ inputs.parameters.variable }}"
          - "--historical={{ inputs.parameters.train-zarr }}"
          - "--reference={{ inputs.parameters.ref-zarr }}"
          - "--out={{ inputs.parameters.out-zarr }}"
          - "--kind={{ inputs.parameters.kind }}"
          - "--iselslice=lat={{ inputs.parameters.lat-slice-min }},{{ inputs.parameters.lat-slice-max }}"
        resources:
          requests:
            memory: 24Gi
            cpu: "1000m"
          limits:
            memory: 32Gi
            cpu: "8000m"
      activeDeadlineSeconds: 3600
      retryStrategy:
        limit: 3
        retryPolicy: "Always"
        backoff:
          duration: 30s
          factor: 2


    - name: apply-qdm
      inputs:
        parameters:
          - name: variable
          - name: qdm-zarr
          - name: simulation-zarr
          - name: first-year
          - name: last-year
          - name: lat-slice-min
          - name: lat-slice-max
          - name: out-zarr
            value: "gs://scratch-170cd6ec/{{ workflow.uid }}/{{ pod.name }}/qdm_adjusted.zarr"
        artifacts:
          - name: global-attrs-json
            path: /tmp/global_attrs.json
      outputs:
        parameters:
          - name: out-zarr
            value: "{{ inputs.parameters.out-zarr }}"
      container:
        image: us-central1-docker.pkg.dev/downscalecmip6/private/dodola:0.10.0
        command: [ dodola ]
        args:
          - "apply-qdm"
          - "--simulation={{ inputs.parameters.simulation-zarr}}"
          - "--qdm={{ inputs.parameters.qdm-zarr}}"
          - "--years={{ inputs.parameters.first-year }},{{ inputs.parameters.last-year }}"
          - "--variable={{ inputs.parameters.variable }}"
          - "--out={{ inputs.parameters.out-zarr }}"
          - "--iselslice=lat={{ inputs.parameters.lat-slice-min }},{{ inputs.parameters.lat-slice-max }}"
          - "--out-zarr-region=lat={{ inputs.parameters.lat-slice-min }},{{ inputs.parameters.lat-slice-max }}"
          - "--root-attrs-json-file=/tmp/global_attrs.json"
        resources:
          requests:
            memory: 32Gi
            cpu: "1000m"
          limits:
            memory: 32Gi
            cpu: "8000m"
      activeDeadlineSeconds: 900
      retryStrategy:
        limit: 3
        retryPolicy: "Always"
        backoff:
          duration: 30s
          factor: 2
